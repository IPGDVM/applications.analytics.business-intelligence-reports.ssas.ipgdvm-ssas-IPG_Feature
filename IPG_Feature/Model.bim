{
  "name": "SemanticModel",
  "compatibilityLevel": 1400,
  "model": {
    "culture": "en-US",
    "dataSources": [
      {
        "name": "Custom",
        "connectionString": "Provider=MSDASQL;Persist Security Info=False;Initial Catalog=HSD_ES;DSN=iBI DaaS",
        "impersonationMode": "impersonateServiceAccount",
        "annotations": [
          {
            "name": "ConnectionEditUISource",
            "value": "Others"
          }
        ]
      }
    ],
    "tables": [
      {
        "name": "QueryFeature",
        "columns": [
          {
            "name": "ww_submitted_date",
            "dataType": "int64",
            "sourceColumn": "ww_submitted_date"
          },
          {
            "name": "family",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "family"
          },
          {
            "name": "id",
            "dataType": "int64",
            "sourceColumn": "id"
          },
          {
            "name": "status",
            "dataType": "string",
            "sourceColumn": "status"
          },
          {
            "name": "totalID",
            "dataType": "int64",
            "sourceColumn": "totalID"
          },
          {
            "name": "url",
            "dataType": "string",
            "sourceColumn": "url",
            "dataCategory": "WebUrl"
          },
          {
            "name": "title",
            "dataType": "string",
            "sourceColumn": "title"
          },
          {
            "name": "featureteam_filed",
            "dataType": "string",
            "sourceColumn": "feature.team_filed"
          },
          {
            "name": "reason",
            "dataType": "string",
            "sourceColumn": "reason"
          },
          {
            "name": "featurepcr",
            "dataType": "string",
            "sourceColumn": "feature.pcr"
          },
          {
            "name": "currentww",
            "dataType": "int64",
            "sourceColumn": "currentww"
          },
          {
            "type": "calculated",
            "name": "CurrentwwSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr],V_DIM_IntelWWSeqNbr[Intel Year-Work Week],[currentww])"
          },
          {
            "type": "calculated",
            "name": "Intel Month",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "related(QueryIntelCalendar[Intel Month Name])",
            "sortByColumn": "IntelMonthNbr"
          },
          {
            "type": "calculated",
            "name": "IntelMonthNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "related(QueryIntelCalendar[Intel Month])"
          },
          {
            "type": "calculated",
            "name": "TapeinWWSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryProductTapeinSeqNbr[WWSeqNbr])"
          },
          {
            "type": "calculated",
            "name": "WWSubmittedSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr],V_DIM_IntelWWSeqNbr[Intel Year-Work Week],[ww_submitted_date])"
          },
          {
            "type": "calculated",
            "name": "ProductIPKey",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[SoC Die]&\"_\"&[IPfamily]"
          },
          {
            "type": "calculated",
            "name": "LatestRTL1p0Date",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryRTL1p0[latestRTL1p0Date])"
          },
          {
            "type": "calculated",
            "name": "TapeinDate",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "related(QueryProductTapein[TrendYYYYWW])"
          },
          {
            "name": "release_affected",
            "dataType": "string",
            "sourceColumn": "release_affected"
          },
          {
            "name": "featuremotivation",
            "dataType": "string",
            "sourceColumn": "feature.motivation"
          },
          {
            "name": "priority",
            "dataType": "string",
            "sourceColumn": "priority"
          },
          {
            "name": "owner",
            "dataType": "string",
            "sourceColumn": "owner"
          },
          {
            "name": "from_tenant",
            "dataType": "string",
            "sourceColumn": "from_tenant"
          },
          {
            "name": "submitted_by",
            "dataType": "string",
            "sourceColumn": "submitted_by"
          },
          {
            "type": "calculated",
            "name": "ActiveIPperProduct",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if([ProductIPKey]=RELATED(QueryActiveProductIP[pfkey]), \"ActiveIPforProduct\", \"NotActiveIPforProduct\")"
          },
          {
            "name": "tag",
            "dataType": "string",
            "sourceColumn": "tag"
          },
          {
            "name": "component",
            "dataType": "string",
            "sourceColumn": "component"
          },
          {
            "name": "tenant",
            "dataType": "string",
            "sourceColumn": "tenant"
          },
          {
            "name": "SoC",
            "dataType": "string",
            "sourceColumn": "SoC"
          },
          {
            "name": "isFWSW",
            "dataType": "int64",
            "sourceColumn": "isFWSW"
          },
          {
            "name": "ip_gen",
            "dataType": "string",
            "sourceColumn": "ip_gen"
          },
          {
            "name": "ww",
            "dataType": "int64",
            "sourceColumn": "ww"
          },
          {
            "name": "ip_supplier",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "ip_supplier"
          },
          {
            "name": "project",
            "dataType": "string",
            "sourceColumn": "project"
          },
          {
            "name": "siip_category",
            "dataType": "string",
            "sourceColumn": "siip_category"
          },
          {
            "name": "stepping_fix",
            "dataType": "string",
            "sourceColumn": "stepping_fix"
          },
          {
            "type": "calculated",
            "name": "IPFamily",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK(RELATED(QueryGladius[Family])), [family], RELATED(QueryGladius[Family]))"
          },
          {
            "type": "calculated",
            "name": "IPSupplier",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK(RELATED(QueryGladius[ip_supplier])), [ip_supplier], RELATED(QueryGladius[ip_supplier]))"
          },
          {
            "type": "calculated",
            "name": "statusorder",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " SWITCH(TRUE(),",
              "    [status] = \"New\",1,",
              "    [status] = \"Exploration\",2,",
              "    [status] = \"In Architecture\",3,",
              "    [status] = \"In Execution\",4,",
              "    [status] = \"Scheduled\",5,",
              "    [status] = \"Alpha\",6,",
              "    [status] = \"Beta\",7,",
              "    [status] = \"In Production\", 8,",
              "    [status] = \"More Info\", 9,",
              "    [status] = \"Deferred\", 10,",
              "    [status] = \"Abandoned\", 11, ",
              "    [status] = \"Rejected\", 12, blank())"
            ]
          },
          {
            "type": "calculated",
            "name": "StatusNameOrder",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[status]",
            "sortByColumn": "statusorder"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration"
          },
          {
            "type": "calculated",
            "name": "SubmittedYear",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "Left([ww_submitted_date], 4)"
          },
          {
            "type": "calculated",
            "name": "SubOrg",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryGladius[SubOrg])"
          },
          {
            "type": "calculated",
            "name": "Platform",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryIPGCustomers[SoC])"
          },
          {
            "name": "SoC Die",
            "dataType": "string",
            "sourceColumn": "SoC Die"
          },
          {
            "type": "calculated",
            "name": "Generation",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryGeneration[ipgeneration])"
          },
          {
            "type": "calculated",
            "name": "HSDES_Family",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[family]"
          },
          {
            "type": "calculated",
            "name": "Execution Lead",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(ISBLANK(RELATED(QueryGladius[Execution_Lead])), \"None\",",
              "IF(RELATED(QueryGladius[Execution_Lead]) = \"\", \"None\",",
              "RELATED(QueryGladius[Execution_Lead]))",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Product Owner",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF(ISBLANK(RELATED(QueryGladius[Product_Owner])), \"None\",",
              "IF(RELATED(QueryGladius[Product_Owner]) = \"\", \"None\",",
              "RELATED(QueryGladius[Product_Owner]))",
              ")",
              ""
            ]
          },
          {
            "name": "sdl_required",
            "dataType": "string",
            "sourceColumn": "sdl_required"
          },
          {
            "name": "AlphaMilestoneID",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "AlphaMilestoneID"
          },
          {
            "name": "BetaMilestoneID",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "BetaMilestoneID"
          },
          {
            "name": "ProdMilestoneID",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "ProdMilestoneID"
          },
          {
            "type": "calculated",
            "name": "Beta_MilestoneID",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "IFERROR(value( [BetaMilestoneID]), BLANK())"
          },
          {
            "type": "calculated",
            "name": "Alpha_TrendDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "RELATED(QueryMilestone[trendYYYYWW])",
              "// This Trend date are from matching tickets exists in Carbon"
            ]
          },
          {
            "type": "calculated",
            "name": "Beta_TrendDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryMilestone[trendYYYYWW],QueryMilestone[milestoneid],[Beta_MilestoneID])"
          },
          {
            "type": "calculated",
            "name": "Beta_Milestone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryMilestone[drop],QueryMilestone[milestoneid],[Beta_MilestoneID])"
          },
          {
            "type": "calculated",
            "name": "Prod_TrendDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryMilestone[trendYYYYWW],QueryMilestone[milestoneid],[Prod_MilestoneID])"
          },
          {
            "type": "calculated",
            "name": "Prod_Milestone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryMilestone[drop],QueryMilestone[milestoneid],[Prod_MilestoneID])"
          },
          {
            "type": "calculated",
            "name": "Prod_MilestoneID",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "IFERROR(value([ProdMilestoneID]), BLANK())"
          },
          {
            "type": "calculated",
            "name": "Alpha_MiletstoneID",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "IFERROR(value([AlphaMilestoneID]), Blank())"
          },
          {
            "type": "calculated",
            "name": "Year_Quarter_Sorting",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryIntelCalendar[Quarter_sorting])"
          },
          {
            "type": "calculated",
            "name": "IntelYearQuarter",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "RELATED(QueryIntelCalendar[Year_Quarter])",
              ""
            ],
            "sortByColumn": "SubmittedYear"
          },
          {
            "type": "calculated",
            "name": "SubmittedYear_Quarter",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "QueryFeature[IntelYearQuarter]",
            "sortByColumn": "Year_Quarter_Sorting"
          },
          {
            "type": "calculated",
            "name": "POPL2TrendDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryPOPL2[TrendYYYYWW])"
          },
          {
            "type": "calculated",
            "name": "POPL2TrendSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr],V_DIM_IntelWWSeqNbr[Intel Year-Work Week],QueryFeature[POPL2TrendDate])"
          },
          {
            "type": "calculated",
            "name": "POPL3TrendSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr],V_DIM_IntelWWSeqNbr[Intel Year-Work Week],QueryFeature[POPL3-ECTrendDate])"
          },
          {
            "type": "calculated",
            "name": "POPL3-EC Milestone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF(ISBLANK(QueryFeature[DEG_POPL3_SeqNbr]),\"No POPL3-EC\",",
              "IF(QueryFeature[WWSubmittedSeqNbr] < QueryFeature[DEG_POPL3_SeqNbr], \"Pre POPL3-EC\", ",
              "IF(QueryFeature[WWSubmittedSeqNbr] >= QueryFeature[DEG_POPL3_SeqNbr], \"Post POPL3-EC\",",
              "\"Invalid\")))"
            ]
          },
          {
            "type": "calculated",
            "name": "POPL2 Milestone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF(ISBLANK(QueryFeature[POPL2TrendDate]),\"No POPL2\",",
              "IF(QueryFeature[WWSubmittedSeqNbr] < QueryFeature[POPL2TrendSeqNbr], \"Pre POPL2\", ",
              "IF(QueryFeature[WWSubmittedSeqNbr] >= QueryFeature[POPL2TrendSeqNbr], \"Post POPL2\",",
              "\"Invalid\")))"
            ]
          },
          {
            "name": "HSDES Status",
            "dataType": "string",
            "sourceColumn": "HSDES Status"
          },
          {
            "type": "calculated",
            "name": "HSDES SortedNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF (",
              "[HSDES status] = \"open\",",
              "1,",
              "IF (",
              "[HSDES status] = \"strawman\",",
              "2,",
              "IF (",
              "[HSDES status] = \"por-1\",",
              "3,",
              "IF (",
              "[HSDES status] = \"por\",",
              "4,",
              "IF (",
              "[HSDES status] = \"complete\",",
              "5,",
              "IF ( [HSDES status] = \"Rejected\", 6, IF ( [HSDES status] = \"future\", 7,",
              "IF(QueryFeature[HSDES Status] = \"JIRA tickets\", 8,",
              "9 ) )",
              ")",
              ")",
              ")",
              ")",
              ")",
              "",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "HSDES Status Sorted",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "QueryFeature[HSDES Status]",
            "sortByColumn": "HSDES SortedNbr"
          },
          {
            "type": "calculated",
            "name": "IP3-IE Miletone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if([milestone_open]=\"Post IE\", \"PostIP3-IE\",if([milestone_open]=\"Pre IE\", \"PreIP3-IE\", if(ISBLANK([IP3IESeqNbr]), \"NoIP3-IE\", if([WWSubmittedSeqNbr]>=[IP3IESeqNbr], \"PostIP3-IE\",if([WWSubmittedSeqNbr]<[IP3IESeqNbr], \"PreIP3-IE\",  \"tbd\")))))"
          },
          {
            "name": "version",
            "dataType": "string",
            "sourceColumn": "version"
          },
          {
            "type": "calculated",
            "name": "Respective_Owner",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryJiraOwner[Owner])"
          },
          {
            "name": "ReviewReadinessDate",
            "dataType": "int64",
            "sourceColumn": "ReviewReadinessDate"
          },
          {
            "type": "calculated",
            "name": "ProdTrend_ColorCode",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(TRUE(),  QueryFeature[tenant]<> \"JIRA\"&&QueryFeature[HSDES Status] in {\"complete\", \"por\"}&&ISBLANK([Prod_TrendDate]), 3, QueryFeature[tenant]<> \"JIRA\"&&QueryFeature[HSDES Status] in {\"complete\", \"por\"}&&QueryFeature[DropComplete?]=\"yes\"&&QueryFeature[CurrentwwSeqNbr]>=QueryFeature[Prod_TrendDateSeqNbr], 1,  QueryFeature[tenant]<> \"JIRA\"&&QueryFeature[HSDES Status] in {\"complete\", \"por\"}&&QueryFeature[DropComplete?]=\"no\"&&QueryFeature[CurrentwwSeqNbr]>=QueryFeature[Prod_TrendDateSeqNbr],2,QueryFeature[tenant]<> \"JIRA\",",
              "0,  QueryFeature[tenant]= \"JIRA\"&&QueryFeature[HSDES Status] in {\"in production\"}&&ISBLANK([Prod_TrendDate]), 3, QueryFeature[tenant]=\"JIRA\"&&QueryFeature[DropComplete?]=\"Yes\"&&QueryFeature[status]=\"in Production\"&&QueryFeature[CurrentwwSeqNbr]>=QueryFeature[Prod_TrendDateSeqNbr], 1,QueryFeature[tenant]=\"JIRA\"&&QueryFeature[DropComplete?]=\"No\"&&QueryFeature[status]=\"in Production\"&&QueryFeature[CurrentwwSeqNbr]>=QueryFeature[Prod_TrendDateSeqNbr],2,0)"
            ]
          },
          {
            "type": "calculated",
            "name": "AlphaMileStone_Colorcode",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(TRUE(), QueryFeature[tenant]<>\"JIRA\", BLANK(),",
              "NOT(ISBLANK(QueryFeature[Alpha_Milestone])), BLANK(),",
              "QueryFeature[CurrentwwSeqNbr] < QueryFeature[ReviewReadinessSeqNbr], 0,",
              "QueryFeature[CurrentwwSeqNbr]>= QueryFeature[ReviewReadinessSeqNbr],1,2)",
              "//This color code is for ALpha milestone date from HSD and JIRA"
            ]
          },
          {
            "type": "calculated",
            "name": "BetaMilestone_ColorCode",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(TRUE(), QueryFeature[tenant]<>\"JIRA\", BLANK(),",
              "NOT(ISBLANK(QueryFeature[Beta_Milestone])), BLANK(),",
              "QueryFeature[CurrentwwSeqNbr] < QueryFeature[ReviewReadinessSeqNbr], 0,",
              "QueryFeature[CurrentwwSeqNbr]>= QueryFeature[ReviewReadinessSeqNbr],1,2)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ProdMilestone_ColorCode",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(TRUE(), QueryFeature[tenant]<>\"JIRA\", BLANK(),",
              "NOT(ISBLANK(QueryFeature[Prod_Milestone])), BLANK(),",
              "QueryFeature[CurrentwwSeqNbr] < QueryFeature[ReviewReadinessSeqNbr], 0,",
              "QueryFeature[CurrentwwSeqNbr]>= QueryFeature[ReviewReadinessSeqNbr],1,2)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "Architecture Lead",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(ISBLANK(RELATED(QueryGladius[Architecture_Lead])), \"None\",",
              "IF(RELATED(QueryGladius[Architecture_Lead]) = \"\", \"None\",",
              "RELATED(QueryGladius[Architecture_Lead]))",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "FeatureDone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " if(and([status]=\"In Architecture\", or([phase]=\"Decide\", [phase]=\"Agree\")),\"Done\",\"Not Done\")",
              "",
              ""
            ]
          },
          {
            "name": "jira_project",
            "dataType": "string",
            "sourceColumn": "jira_project"
          },
          {
            "name": "duedate",
            "dataType": "dateTime",
            "sourceColumn": "duedate"
          },
          {
            "name": "reporter",
            "dataType": "string",
            "sourceColumn": "reporter"
          },
          {
            "type": "calculated",
            "name": "ActionRequiredColor_Code",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(QueryFeature[ActionRequireSort] = 4,0,",
              "IF(QueryFeature[ActionRequireSort] in {0,1,2,3},1, BLANK()))"
            ]
          },
          {
            "type": "calculated",
            "name": "ActionRequireSort",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(ISBLANK(QueryFeature[ActionRequired]),-1,IF(QueryFeature[ActionRequired]=\"Alpha Milestone is closed, progress Feature State to Beta\",12,IF(QueryFeature[ActionRequired]=\"Beta Milestone is closed, progress Feature State to InProduction\",13,IF(QueryFeature[ActionRequired]=\"Prod Milestone is closed, progress Feature State to Prod\",14,IF(QueryFeature[ActionRequired]=\"The feature is allocated to obsoleted IP Configuration in Carbon. Please allocate the feature to active IP Configuration in Carbon or move the feature to Future or Rejected.\",15,IF(QueryFeature[ActionRequired]=\"The Alpha/Beta/Prod are allocated to obsoleted milestones in Carbon. Please allocate the feature to active milestones in Carbon.\",16,IF(QueryFeature[ActionRequired]=\"Alpha/Beta/Prod are allocated to non-execution milestones. Please allocate this feature to execution milestones (EV/UV/FV/etc.)",
              "\",17,RELATED(QueryJiraOwner[Sorting]))))))))"
            ]
          },
          {
            "type": "calculated",
            "name": "Owner Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " //Getting owner names base on repsective column replace with actual name from other columns",
              "IF(QueryFeature[Respective_Owner] = \"Product Owner, Architecture Owner, execution owner\", QueryFeature[ProductOwner Name] & \", \" & QueryFeature[ArchitectureLead Name] & \", \" & QueryFeature[ExecutionLead Name],",
              "IF(QueryFeature[Respective_Owner] = \"Product Owner, Architecture Owner\",  QueryFeature[ProductOwner Name] & \", \" & QueryFeature[ArchitectureLead Name],",
              "IF(QueryFeature[Respective_Owner] = \"Product Owner\",  QueryFeature[ProductOwner Name],",
              "IF(QueryFeature[Respective_Owner] = \"Architecture Owner\", QueryFeature[ArchitectureLead Name],",
              "IF(QueryFeature[Respective_Owner] = \"Execution Lead\", QueryFeature[ExecutionLead Name],",
              " BLANK())))))"
            ]
          },
          {
            "type": "calculated",
            "name": "ProductOwner Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR firstname = LOOKUPVALUE(QueryWorkerPublic[FirstName],QueryWorkerPublic[upperIDSID],QueryFeature[Product Owner])",
              "VAR lastname =LOOKUPVALUE(QueryWorkerPublic[LastName],QueryWorkerPublic[upperIDSID],QueryFeature[Product Owner])",
              "var  finallast = IF(ISBLANK(lastname),\"SID: \"& QueryFeature[Product Owner], lastname)",
              "return IF(QueryFeature[Product Owner]= \"None\", \"None\",    firstname & \" \" & finallast)"
            ]
          },
          {
            "type": "calculated",
            "name": "ArchitectureLead Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "VAR firstname = LOOKUPVALUE(QueryWorkerPublic[FirstName],QueryWorkerPublic[upperIDSID],QueryFeature[Architecture Lead])",
              "VAR lastname =LOOKUPVALUE(QueryWorkerPublic[LastName],QueryWorkerPublic[upperIDSID],QueryFeature[Architecture Lead])",
              "var  finallast = IF(ISBLANK(lastname),\"SID: \"& QueryFeature[Architecture Lead], lastname)",
              "return IF(QueryFeature[Architecture Lead]  = \"None\", \"None\",    firstname & \" \" & finallast)"
            ]
          },
          {
            "type": "calculated",
            "name": "ExecutionLead Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "//GEtting full name using SID from querypublicworker table",
              "VAR firstname = LOOKUPVALUE(QueryWorkerPublic[FirstName],QueryWorkerPublic[upperIDSID],QueryFeature[Execution Lead])",
              "VAR lastname =LOOKUPVALUE(QueryWorkerPublic[LastName],QueryWorkerPublic[upperIDSID],QueryFeature[Execution Lead])",
              "var  finallast = IF(ISBLANK(lastname),\"SID: \"& QueryFeature[Execution Lead], lastname)",
              "return IF(QueryFeature[Execution Lead]  = \"None\", \"None\",    firstname & \" \" & finallast)"
            ]
          },
          {
            "name": "hsdes_jira_status",
            "dataType": "string",
            "sourceColumn": "hsdes_jira_status"
          },
          {
            "type": "calculated",
            "name": "configuration_with_missing",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK([Configuration]) || [Configuration]=\"\", \"missing\", QueryFeature[Configuration])"
          },
          {
            "name": "state",
            "dataType": "string",
            "sourceColumn": "state"
          },
          {
            "type": "calculated",
            "name": "Action Required",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "[ActionRequired]",
              "  //to handle the circular issue at Actionrequiredcolor column",
              "  "
            ],
            "sortByColumn": "ActionRequireSort"
          },
          {
            "type": "calculated",
            "name": "JIRATenant",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(QueryFeature[tenant] = \"JIRA\", 1,0)"
          },
          {
            "type": "calculated",
            "name": "FeatureLiveData",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(queryfeature[ww] = QueryFeature[currentww], 1,0)",
              "//Identify if current workweek data"
            ]
          },
          {
            "type": "calculated",
            "name": "Drop_TrendYYYYWW",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "if([tenant]=\"JIRA\"&&ISBLANK([AlphaMilestoneID]), \"NoMilestoneMapping\", if([tenant]=\"JIRA\", RELATED(QueryMilestone[drop])&\"_\"&RELATED(QueryMilestone[trendYYYYWW])))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "POPL3-ECTrendDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED('QueryPOPL3-EC'[TrendYYYYWW])"
          },
          {
            "type": "calculated",
            "name": "Alpha_Milestone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if([Alpha_MiletstoneID]=RELATED(QueryMilestone[milestoneid]), RELATED(QueryMilestone[drop]), \"NotValidAlphaMilestoneID\")"
          },
          {
            "name": "alpha_version",
            "dataType": "string",
            "sourceColumn": "alpha_version"
          },
          {
            "name": "beta_version",
            "dataType": "string",
            "sourceColumn": "beta_version"
          },
          {
            "name": "prod_version",
            "dataType": "string",
            "sourceColumn": "prod_version"
          },
          {
            "name": "alpha_release_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "alpha_release_id"
          },
          {
            "name": "beta_release_id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "beta_release_id"
          },
          {
            "name": "prod_release_Id",
            "dataType": "int64",
            "isHidden": true,
            "sourceColumn": "prod_release_Id"
          },
          {
            "name": "beta_release_key_url",
            "dataType": "string",
            "sourceColumn": "beta_release_key_url"
          },
          {
            "name": "prod_release_key_url",
            "dataType": "string",
            "sourceColumn": "prod_release_key_url"
          },
          {
            "name": "alpha_release_key_url",
            "dataType": "string",
            "sourceColumn": "alpha_release_key_url"
          },
          {
            "type": "calculated",
            "name": "beta_release_id_colorCode",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if([tenant]<>\"JIRA\", 0, if([status] in {\"new\",\"Deferred\", \"Exploration\", \"In Architecture\", \"In Execution\", \"Abandoned\", \"Rejected\"}, 0, if(ISBLANK([beta_release_id]), 1, 0)))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "prod_release_id_ColorCode",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if([tenant]<>\"JIRA\", 0, if([status] in {\"new\",\"Deferred\", \"Exploration\", \"In Architecture\", \"In Execution\", \"Abandoned\", \"Rejected\"}, 0, if(ISBLANK([prod_release_id]), 1, 0)))",
              ""
            ]
          },
          {
            "name": "alpha_configuration",
            "dataType": "string",
            "sourceColumn": "alpha_configuration"
          },
          {
            "name": "alpha_configuration_url",
            "dataType": "string",
            "sourceColumn": "alpha_configuration_url"
          },
          {
            "name": "beta_configuration",
            "dataType": "string",
            "sourceColumn": "beta_configuration"
          },
          {
            "name": "beta_configuration_url",
            "dataType": "string",
            "sourceColumn": "beta_configuration_url"
          },
          {
            "name": "prod_configuration",
            "dataType": "string",
            "sourceColumn": "prod_configuration"
          },
          {
            "name": "prod_configuration_url",
            "dataType": "string",
            "sourceColumn": "prod_configuration_url"
          },
          {
            "type": "calculated",
            "name": "alpha_release_id_ColorCode",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if([tenant]<>\"JIRA\", 0, if([status] in {\"new\",\"Deferred\", \"Exploration\", \"In Architecture\", \"In Execution\", \"Abandoned\", \"Rejected\"}, 0, if(ISBLANK([alpha_release_id]), 1, 0)))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "BetaReleaseID",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(QueryFeature[beta_release_id] = 0, BLANK(), QueryFeature[beta_release_id])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "AlphaReleaseID",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(QueryFeature[alpha_release_id] = 0, BLANK(), QueryFeature[alpha_release_id])"
          },
          {
            "type": "calculated",
            "name": "ProdReleaseID",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(QueryFeature[prod_release_id] = 0, BLANK(), QueryFeature[prod_release_id])"
          },
          {
            "type": "calculated",
            "name": "ReviewReadinessSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "If(ISBLANK(QueryFeature[ReviewReadinessDate]), 9000, LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr],V_DIM_IntelWWSeqNbr[Intel Year-Work Week],QueryFeature[ReviewReadinessDate]))"
          },
          {
            "type": "calculated",
            "name": "DropComplete?",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryMilestone[complete])"
          },
          {
            "type": "calculated",
            "name": "Prod_TrendDateSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "If(ISBLANK(QueryFeature[Prod_TrendDate]), 9000, LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr],V_DIM_IntelWWSeqNbr[Intel Year-Work Week],QueryFeature[Prod_TrendDate]))"
          },
          {
            "name": "key",
            "dataType": "string",
            "sourceColumn": "key"
          },
          {
            "type": "calculated",
            "name": "ipconfigurationid",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryGeneration[ipconfigurationid])"
          },
          {
            "type": "calculated",
            "name": "configuration_url",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK([Configuration]), \"\", \"https://hsdes.intel.com/appstore/carbon/planning/milestone-plan/\"&[ipconfigurationid])"
          },
          {
            "type": "calculated",
            "name": "IEDropDate",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "value(RELATED(QueryIEMilestone[trendyyyyww]))"
          },
          {
            "type": "calculated",
            "name": "Product_Config_UniqueKey",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if(QueryFeature[Reuse]=\"Configurable\",[SoC Die]&\"_\"&[Configuration],\"_\"&[Configuration])"
          },
          {
            "type": "calculated",
            "name": "13weeksSnapshotFilter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([WWSeqNbr]>[CurrentWWSeqNbr]-13, 1, 0)"
          },
          {
            "type": "calculated",
            "name": "WWSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr],V_DIM_IntelWWSeqNbr[Intel Year-Work Week],[ww])"
          },
          {
            "type": "calculated",
            "name": "UniqueKeyforAlpha",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[ww]&\"_\"&[ContractCommitAlphaMilestoneID]"
          },
          {
            "type": "calculated",
            "name": "UniqueKeyforBeta",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[ww]&\"_\"&[ContractCommitBetaMilestoneID]"
          },
          {
            "type": "calculated",
            "name": "UniqueKeyforProd",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[ww]&\"_\"&[ContractCommitProdMilestoneID]"
          },
          {
            "type": "calculated",
            "name": "Feature_HAS_Complete",
            "dataType": "string",
            "isDataTypeInferred": false,
            "expression": [
              " IF([tenant] = \"JIRA\", if(and([status]=\"In Architecture\", or([phase]=\"Decide\",[phase]=\"Agree\")),\"Done\", if(ISBLANK([duedate_ww_final]) ,\"No date\", [duedate_ww_final])), IF([status] = \"complete\" || [status] = \"por\" || ([status] = \"strawman\" && [state] = \"in_exec\") , \"Done\", IF(ISBLANK([duedate_ww_final]), \"No Date\", [duedate_ww_final])))&\"\"",
              " ",
              "",
              ""
            ]
          },
          {
            "name": "Phase",
            "dataType": "string",
            "sourceColumn": "Phase"
          },
          {
            "type": "calculated",
            "name": "Is_Active",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if([hsdes_jira_status] in {\"complete\", \"rejected\", \"future\", \"In Production\", \"Deferred\", \"Abandoned\"}, 0, 1)",
              ""
            ]
          },
          {
            "name": "feature.milestone_open",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "feature.milestone_open"
          },
          {
            "type": "calculated",
            "name": "milestone_open",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if([feature.milestone_open] in {\"IP Concept\", \"Concept\", \"ip0\", \"ip1\", \"ip2\", \"popl0\", \"popl1\", \"Post-Concept/Pre-Commit\", \"feasibility\"}, \"Pre IE\",if(QueryFeature[stage_found]in {\"Concept\",\"Feasibility\"},\"Pre IE\",if(QueryFeature[stage_found]in {\"Execution\"},\"Post IE\",if([feature.milestone_open] in {\"IP Execution Commit\", \"Execution\", \"ip_polo\", \"ip_prod\", \"ip_rtl_0p5\", \"ip_rtl_0p8\", \"ip_rtl_1p0\", \"ip3\", \"popl2\", \"popl3\"}, \"Post IE\", \"tbd\"))))"
          },
          {
            "type": "calculated",
            "name": "IEDropSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr],V_DIM_IntelWWSeqNbr[Intel Year-Work Week],QueryFeature[IEDropDate])"
          },
          {
            "type": "calculated",
            "name": "IP3IEDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryIP3IEDrop[trenddate])"
          },
          {
            "type": "calculated",
            "name": "IP3IESeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr],V_DIM_IntelWWSeqNbr[Intel Year-Work Week],QueryFeature[IP3IEDate])"
          },
          {
            "type": "calculated",
            "name": "Is_Active_Or_Complete",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([hsdes_jira_status] in {\"rejected\", \"future\", \"Deferred\", \"Abandoned\"}, 0, 1)"
          },
          {
            "type": "calculated",
            "name": "ContractCommitAlphaMilestoneID",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "minx(",
              "FILTER(QueryFeature",
              ",QueryFeature[Product_Config_UniqueKey]=EARLIER(QueryFeature[Product_Config_UniqueKey])",
              "&&QueryFeature[id]=EARLIER(QueryFeature[id])&&QueryFeature[ww]=QueryFeature[IEDropDate]",
              "",
              ")",
              ",QueryFeature[Alpha_MiletstoneID])"
            ]
          },
          {
            "type": "calculated",
            "name": "ContractCommitAlphaPORDate",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryCarbonMilestoneHistory[pordateyyyyww], QueryCarbonMilestoneHistory[UniqueKey], QueryFeature[UniqueKeyforAlpha])"
          },
          {
            "type": "calculated",
            "name": "ContractCommitBetaMilestoneID",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "minx(",
              "FILTER(QueryFeature",
              ",QueryFeature[Product_Config_UniqueKey]=EARLIER(QueryFeature[Product_Config_UniqueKey])",
              "&&QueryFeature[id]=EARLIER(QueryFeature[id])&&QueryFeature[ww]=QueryFeature[IEDropDate]",
              "",
              ")",
              ",QueryFeature[Beta_MilestoneID])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ContractCommitBetaPORDate",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryCarbonMilestoneHistory[pordateyyyyww], QueryCarbonMilestoneHistory[UniqueKey], QueryFeature[UniqueKeyforBeta])"
          },
          {
            "type": "calculated",
            "name": "ContractCommitProdMilestoneID",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "minx(",
              "FILTER(QueryFeature",
              ",QueryFeature[Product_Config_UniqueKey]=EARLIER(QueryFeature[Product_Config_UniqueKey])",
              "&&QueryFeature[id]=EARLIER(QueryFeature[id])&&QueryFeature[ww]=QueryFeature[IEDropDate]",
              "",
              ")",
              ",QueryFeature[prod_MilestoneID])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ContractCommitProdPORDate",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryCarbonMilestoneHistory[pordateyyyyww], QueryCarbonMilestoneHistory[UniqueKey], QueryFeature[UniqueKeyforprod])"
          },
          {
            "type": "calculated",
            "name": "Is_New",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([WWSubmittedSeqNbr]>=[CurrentwwSeqNbr]-1, 1, 0)"
          },
          {
            "name": "summary_team_filed",
            "dataType": "string",
            "sourceColumn": "summary_team_filed"
          },
          {
            "type": "calculated",
            "name": "DEG_POPL3",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(ISBLANK(RELATED(DEG_Product_Manual_POPL3[POPL3 Date])),",
              "QueryFeature[POPL3-ECTrendDate],",
              "INT(RELATED(DEG_Product_Manual_POPL3[POPL3 Date]))",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "DEG_POPL3_SeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr],",
              "V_DIM_IntelWWSeqNbr[Intel Year-Work Week],[DEG_POPL3])"
            ]
          },
          {
            "name": "feature_issuetype",
            "dataType": "string",
            "sourceColumn": "feature_issuetype"
          },
          {
            "name": "feature_labels",
            "dataType": "string",
            "sourceColumn": "feature_labels"
          },
          {
            "name": "ProjectURL",
            "dataType": "string",
            "sourceColumn": "ProjectURL",
            "dataCategory": "WebUrl"
          },
          {
            "name": "post_EC_pending_CCB",
            "dataType": "string",
            "sourceColumn": "post_EC_pending_CCB"
          },
          {
            "type": "calculated",
            "name": "LatestUniqueID",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if(QueryFeature[tenant]=\"JIRA\", QueryFeature[id]&QueryFeature[ww]&QueryFeature[IPFamily]&QueryFeature[SoC Die]&QueryFeature[project]&QueryFeature[status]&QueryFeature[hsdes_jira_status]&QueryFeature[owner], QueryFeature[id]&QueryFeature[ww])"
          },
          {
            "name": "submitted_org",
            "dataType": "string",
            "sourceColumn": "submitted_org"
          },
          {
            "name": "stage_found",
            "dataType": "string",
            "sourceColumn": "stage_found"
          },
          {
            "type": "calculated",
            "name": "alpha_val",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryMilestone[complete])"
          },
          {
            "type": "calculated",
            "name": "prod_val",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(Querymilestone[complete],QueryMilestone[milestoneid], QueryFeature[Prod_MilestoneID])"
          },
          {
            "type": "calculated",
            "name": "beta_val",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(Querymilestone[complete],QueryMilestone[milestoneid], QueryFeature[beta_MilestoneID])"
          },
          {
            "name": "duedate_YYYYWW",
            "dataType": "int64",
            "sourceColumn": "duedate_YYYYWW"
          },
          {
            "type": "calculated",
            "name": "DueDateSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr], V_DIM_IntelWWSeqNbr[Intel Year-Work Week], value(QueryFeature[duedate_ww_final]))"
          },
          {
            "type": "calculated",
            "name": "DueDateECDiff",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "QueryFeature[ECDateSeqNbr]-QueryFeature[DueDateSeqNbr]"
          },
          {
            "type": "calculated",
            "name": "is_submitted_in_last_year",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var currentww = QueryFeature[CurrentWWSeqNbr]",
              "var ticketww = QueryFeature[WWSubmittedSeqNbr]",
              "",
              "return if(ticketww <= currentww && ticketww >= currentww - 52, 1, 0)"
            ]
          },
          {
            "name": "duedate_year",
            "dataType": "string",
            "sourceColumn": "duedate_year"
          },
          {
            "type": "calculated",
            "name": "Reuse",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryIPGReuse[reuse])"
          },
          {
            "type": "calculated",
            "name": "duedate_ww_final",
            "dataType": "string",
            "isDataTypeInferred": false,
            "expression": [
              "IF(len([duedate_YYYYWW]) > 1, [duedate_YYYYWW], IF(len([duedate_ww_hsdes]) > 1, value(SUBSTITUTE([duedate_ww_hsdes], \"ww\", \"\")), blank()))",
              ""
            ]
          },
          {
            "name": "duedate_ww_hsdes",
            "dataType": "string",
            "sourceColumn": "duedate_ww_hsdes"
          },
          {
            "type": "calculated",
            "name": "Final_WW_duedate",
            "dataType": "string",
            "isDataTypeInferred": false,
            "expression": "IF(ISBLANK(QueryFeature[duedate_ww_final]),\"No Date\",QueryFeature[duedate_ww_final])"
          },
          {
            "type": "calculated",
            "name": "Fhas_progress",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF(QueryFeature[Fhas_complete]=\"Complete\",\"Complete\",IF(QueryFeature[Fhas_Planned]=\" Planned\",\" Planned\",\"\"))"
          },
          {
            "type": "calculated",
            "name": "Fhas_map",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "QueryFeature[Fhas_progress]&\" \"&QueryFeature[Final_WW_duedate]"
          },
          {
            "type": "calculated",
            "name": "Fhas_Planned",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF(QueryFeature[Final_WW_duedate]=\"No Date\" ,\"\",\" Planned\")"
          },
          {
            "type": "calculated",
            "name": "Fhas_complete",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH( [state] , \"Scheduled\",\"Complete\",",
              "\"Alpha\",\"Complete\",",
              "\"Beta\",\"Complete\",",
              "\"In Production\",\"Complete\",",
              "\"In Execution\",\"Complete\",",
              "\"Closed\",\"Complete\",",
              "\"Scheduled\",\"Complete\",",
              "\"Released\",\"Complete\",",
              "\"In Architecture\",\"Complete\",",
              "IF(QueryFeature[status]=\"In Execution\",\"Complete\",IF(QueryFeature[Phase]=\"Agree\",\"Complete\",IF(QueryFeature[Phase]=\"Decide\",\"Complete\",\"\")))",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "ECDateSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr],V_DIM_IntelWWSeqNbr[Intel Year-Work Week], RELATED(QueryIEDrops[Trend]))"
          },
          {
            "name": "Actual_Trend_Date",
            "dataType": "dateTime",
            "sourceColumn": "Actual_Trend_Date"
          },
          {
            "name": "trenddate_year",
            "dataType": "string",
            "sourceColumn": "trenddate_year"
          },
          {
            "name": "trenddate_YYYYWW",
            "dataType": "string",
            "sourceColumn": "trenddate_YYYYWW"
          },
          {
            "type": "calculated",
            "name": "Final_ww_Trenddate",
            "dataType": "string",
            "isDataTypeInferred": false,
            "expression": "IF(ISBLANK(QueryFeature[trenddate_YYYYWW]),\"No Date\",QueryFeature[trenddate_YYYYWW])"
          },
          {
            "type": "calculated",
            "name": "Fhas_Planned_trend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF(QueryFeature[Final_ww_Trenddate]=\"No Date\" ,\"\",\" Planned\")"
          },
          {
            "type": "calculated",
            "name": "Fhas_Progress_trend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF(QueryFeature[Fhas_complete]=\"Complete\",\"Complete\",IF(QueryFeature[Fhas_Planned_trend]=\" Planned\",\" Planned\",\"\"))"
          },
          {
            "type": "calculated",
            "name": "Fhas_map_trend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "QueryFeature[Fhas_Progress_trend]&\" \"&QueryFeature[Final_ww_Trenddate]"
          },
          {
            "type": "calculated",
            "name": "final_ww_trend_due_date",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF(ISBLANK(QueryFeature[trenddate_YYYYWW]),QueryFeature[Final_WW_duedate],QueryFeature[Final_ww_Trenddate])"
          },
          {
            "type": "calculated",
            "name": "Fhas_planned_trend_due",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF(QueryFeature[final_ww_trend_due_date]=\"No Date\" ,\"\",\" Planned\")"
          },
          {
            "type": "calculated",
            "name": "Fhas_Progress_trend_due",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF(QueryFeature[Fhas_complete]=\"Complete\",\"Complete\",IF(QueryFeature[Fhas_planned_trend_due]=\" Planned\",\" Planned\",\"\"))"
          },
          {
            "type": "calculated",
            "name": "Fhas_map_trend_due",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "QueryFeature[Fhas_Progress_trend_due]&\" \"&QueryFeature[final_ww_trend_due_date]"
          },
          {
            "name": "SoC Die Name",
            "dataType": "string",
            "sourceColumn": "SoC Die Name"
          },
          {
            "type": "calculated",
            "name": "SoC Die 1",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "PATHITEM(SUBSTITUTE(QueryFeature[SoC Die Name],\",\",\"|\"),1)"
          },
          {
            "type": "calculated",
            "name": "SoC Die 2",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "PATHITEM(SUBSTITUTE(QueryFeature[SoC Die Name],\",\",\"|\"),2)"
          },
          {
            "type": "calculated",
            "name": "Soc Die 3",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "PATHITEM(SUBSTITUTE(QueryFeature[SoC Die Name],\",\",\"|\"),3)"
          },
          {
            "type": "calculated",
            "name": "Soc Die 4",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "PATHITEM(SUBSTITUTE(QueryFeature[SoC Die Name],\",\",\"|\"),4)"
          },
          {
            "type": "calculated",
            "name": "Soc Die 5",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "PATHITEM(SUBSTITUTE(QueryFeature[SoC Die Name],\",\",\"|\"),5)"
          },
          {
            "type": "calculated",
            "name": "Soc Die Name1",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryJiraSocDieName1[Soc Die Name])"
          },
          {
            "type": "calculated",
            "name": "SoC Die Name2",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryJiraSocDieName2[Soc Die Name])"
          },
          {
            "type": "calculated",
            "name": "SoC Die Name3",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryJiraSocDieName3[Soc Die Name])"
          },
          {
            "type": "calculated",
            "name": "Soc Die Name4",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryJiraSocDieName4[Soc Die Name])"
          },
          {
            "type": "calculated",
            "name": "Soc Die Name5",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryJiraSocDieName5[Soc Die Name])"
          },
          {
            "type": "calculated",
            "name": "Soc Die Name Complete",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "COMBINEVALUES(\" \",QueryFeature[SoC Die],QueryFeature[Soc Die Name1],QueryFeature[SoC Die Name2],QueryFeature[SoC Die Name3],QueryFeature[Soc Die Name4],QueryFeature[Soc Die Name5])"
          },
          {
            "type": "calculated",
            "name": "TrendDateSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr], V_DIM_IntelWWSeqNbr[Intel Year-Work Week], value(QueryFeature[trenddate_YYYYWW]))"
          },
          {
            "type": "calculated",
            "name": "TrendDueDateSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr], V_DIM_IntelWWSeqNbr[Intel Year-Work Week], value(IF(ISBLANK(QueryFeature[trenddate_YYYYWW]),QueryFeature[duedate_ww_final],QueryFeature[trenddate_YYYYWW])))"
          },
          {
            "type": "calculated",
            "name": "Feature_HAS_CompleteTrend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " IF([tenant] = \"JIRA\", if(and([status]=\"In Architecture\", or([phase]=\"Decide\",[phase]=\"Agree\")),\"Done\", if(ISBLANK([trenddate_YYYYWW]) ,\"No date\", [trenddate_YYYYWW])), IF([status] = \"complete\" || [status] = \"por\" || ([status] = \"strawman\" && [state] = \"in_exec\") , \"Done\", IF(ISBLANK([trenddate_YYYYWW]), \"No Date\", [trenddate_YYYYWW])))&\"\""
          },
          {
            "type": "calculated",
            "name": "Feature_HAS_CompleteTrendDue",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " IF([tenant] = \"JIRA\", if(and([status]=\"In Architecture\", or([phase]=\"Decide\",[phase]=\"Agree\")),\"Done\", if(ISBLANK([trenddate_YYYYWW]) ,if(ISBLANK(QueryFeature[duedate_ww_final]),\"No Date\",[duedate_ww_final]), [trenddate_YYYYWW])), IF([status] = \"complete\" || [status] = \"por\" || ([status] = \"strawman\" && [state] = \"in_exec\") , \"Done\", IF(ISBLANK([trenddate_YYYYWW]), if(ISBLANK(QueryFeature[duedate_ww_final]),\"No Date\",[duedate_ww_final]), [trenddate_YYYYWW])))&\"\""
          },
          {
            "name": "hsdes",
            "dataType": "string",
            "sourceColumn": "hsdes"
          },
          {
            "type": "calculated",
            "name": "hsdesid_jirakey",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([tenant] = \"JIRA\" || [tenant] = \"jira\", [key], CONVERT([id],STRING))"
          },
          {
            "type": "calculated",
            "name": "IndustryDomain",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryGladius[IndustryDomain])"
          },
          {
            "type": "calculated",
            "name": "IsObsoleteConfig",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryObsoleteConfig[is_obsolete])"
          },
          {
            "type": "calculated",
            "name": "FinalObsoleteconfiguration",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([IsObsoleteConfig]=1&& (NOT QueryFeature[status] IN {\"complete\",\"In Production\"}), \"yes\", \"no\")"
          },
          {
            "type": "calculated",
            "name": "validAlphaMilestone",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK([Alpha_MiletstoneID]), 2, if(RELATED(QueryMilestone[existing_milestone])=\"yes\", 1, 0))"
          },
          {
            "type": "calculated",
            "name": "ValidBetaMilestone",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK([Beta_MilestoneID]), 2, if([isExistingBetamilestone]=\"yes\", 1, 0))"
          },
          {
            "type": "calculated",
            "name": "ValidProdMilestone",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK([prod_MilestoneID]), 2, if([isExistingprodmilestone]=\"yes\", 1, 0))"
          },
          {
            "type": "calculated",
            "name": "isExistingBetamilestone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryMilestone[existing_milestone], QueryMilestone[milestoneid], [Beta_MilestoneID])"
          },
          {
            "type": "calculated",
            "name": "isExistingProdMilestone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryMilestone[existing_milestone], QueryMilestone[milestoneid], [prod_MilestoneID])"
          },
          {
            "type": "calculated",
            "name": "FinalObsoleteMilestone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if(([validAlphaMilestone]=0 || [ValidBetaMilestone]=0||[ValidProdMilestone]=0)&& (NOT QueryFeature[status] IN {\"complete\",\"In Production\"}), \"Yes\", \"No\")"
          },
          {
            "type": "calculated",
            "name": "executionAlpha_milestone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if([validAlphaMilestone]=0, \"obsolete\", if(ISBLANK(RELATED(QueryMilestone[is_execution_milestone])), \"blank\", RELATED(QueryMilestone[is_execution_milestone])))"
          },
          {
            "type": "calculated",
            "name": "executionBeta_milestone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " if(ISBLANK([Beta_MilestoneID]), \"blank\", if([ValidBetaMilestone]=0, \"obsolete\", LOOKUPVALUE(QueryMilestone[is_execution_milestone], QueryMilestone[milestoneid], [beta_MilestoneID])))"
          },
          {
            "type": "calculated",
            "name": "executionProd_milestone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " if(ISBLANK([prod_MilestoneID]), \"blank\", if([ValidprodMilestone]=0, \"obsolete\", LOOKUPVALUE(QueryMilestone[is_execution_milestone], QueryMilestone[milestoneid], [prod_MilestoneID])))"
          },
          {
            "type": "calculated",
            "name": "FinalExecutionMilestone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([executionAlpha_milestone]=\"yes\"||[executionBeta_milestone]= \"yes\" || [executionProd_milestone] = \"yes\", \"yes\", \"no\")"
          },
          {
            "type": "calculated",
            "name": "ActionRequired",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "var alpha = QueryFeature[alpha_val]",
              "  var beta = QueryFeature[beta_val] ",
              "  var prod = QueryFeature[prod_val]",
              "   var oconfig =QueryFeature[FinalObsoleteconfiguration]",
              "  var omilestone =QueryFeature[FinalObsoleteMilestone]",
              "  var oexmilestone = QueryFeature[FinalExecutionmilestone]",
              "  // Commented logic for else  ,RELATED(QueryJiraOwner[Comment])",
              "  //\"Prod Milestone is closed, progress Feature State to Prod\",\"Neither of Alpha, Beta or Prod are in complete state\")",
              "    return (IF((alpha=\"Yes\" && beta = \"No\" && ( prod=\"No\" || prod=\"\")),\"Alpha Milestone is closed, progress Feature State to Beta\",IF((alpha=\"Yes\" && beta = \"Yes\" &&( prod=\"No\"||prod=\"\")),\"Beta Milestone is closed, progress Feature State to InProduction\",IF((alpha=\"Yes\" && beta = \"Yes\" && prod=\"Yes\"),\"Prod Milestone is closed, progress Feature State to Prod\",IF((omilestone=\"Yes\"),\"The Alpha/Beta/Prod are allocated to obsoleted milestones in Carbon. Please allocate the feature to active milestones in Carbon.\",IF((oconfig=\"Yes\"),\"The feature is allocated to obsoleted IP Configuration in Carbon. Please allocate the feature to active IP Configuration in Carbon or move the feature to Future or Rejected.\",IF((oexmilestone=\"Yes\"),\"Alpha/Beta/Prod are allocated to non-execution milestones. Please allocate this feature to execution milestones (EV/UV/FV/etc.)",
              "\",RELATED(QueryJiraOwner[Comment]))))))))",
              "",
              "//  return (IF((alpha=\"Yes\" && beta = \"No\" && ( prod=\"No\" || prod=\"\")),\"Alpha Milestone is closed, progress Feature State to Beta\",IF((alpha=\"Yes\" && beta = \"Yes\" &&( prod=\"No\"||prod=\"\")),\"Beta Milestone is closed, progress Feature State to InProduction\",IF((alpha=\"Yes\" && beta = \"Yes\" && prod=\"Yes\"),\"Prod Milestone is closed, progress Feature State to Prod\",RELATED(QueryJiraOwner[Comment])))))"
            ]
          },
          {
            "name": "reason_detail",
            "dataType": "string",
            "sourceColumn": "reason_detail"
          },
          {
            "type": "calculated",
            "name": "ActionRequiredNew",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var stat = QueryFeature[status]",
              "var alpha = QueryFeature[alpha_val]",
              "var beta = QueryFeature[beta_val]",
              "var prod = QueryFeature[prod_val]",
              "",
              "return ",
              "(",
              "\tIF(stat = \"Alpha\" && alpha = \"Yes\" && beta = \"No\",  \"Good Job!\", ",
              "\t\tIF(stat = \"Beta\" && beta = \"Yes\", \"Good Job!\",",
              "\t\t\tIF(stat = \"In Production\" && prod = \"Yes\", \"Good Job!\",",
              "\t\t\t\tIF(stat <> \"Alpha\" && alpha = \"Yes\" && beta = \"No\", \"Make sure HSDES status = por and state = alpha. For JIRA status = alpha\",",
              "\t\t\t\t\tIF(stat <> \"Beta\" && alpha = \"Yes\" && beta = \"Yes\" && prod = \"No\", \"Make sure HSDES status = por and state = beta. For JIRA status = beta\",",
              "\t\t\t\t\t\tIF(stat <> \"In Production\" && alpha = \"Yes\" && beta = \"Yes\" && prod = \"Yes\", \"Make sure HSDES status = complete and state = prod. For JIRA status = prod\",",
              "\t\t\t\t\t\t\tBlank()",
              "\t\t\t\t\t\t)",
              "\t\t\t\t\t)",
              "",
              "\t\t\t\t)",
              "\t\t\t)",
              "\t\t)",
              "\t)",
              ")"
            ]
          },
          {
            "name": "from_id",
            "dataType": "int64",
            "sourceColumn": "from_id"
          }
        ],
        "partitions": [
          {
            "name": "QueryFeature",
            "source": {
              "type": "query",
              "query": [
                "select distinct ",
                "tenant",
                ",project as jira_project",
                ",duedate",
                ",duedate_ww as duedate_ww_hsdes",
                ",left (duedate, 4) as [duedate_year]",
                ",datepart(ww, duedate) AS [duedate_YYYYWW]",
                ",reporter",
                ",ww",
                ",feature_issuetype",
                ",feature_labels",
                ",ProjectURL",
                ",[ww_submitted_date]",
                ",[currentww] ",
                ",[id]",
                ",Phase",
                ",key",
                ", [ipfamily] as [family]",
                ",ip_supplier",
                ", program as project",
                ",[SoC Die]",
                ",[SoC Die Name]",
                ",status",
                ",[HSDES Status]",
                ",hsdes_jira_status",
                ",[feature.team_filed]",
                ",[summary_team_filed]",
                ",isFWSW",
                ",from_tenant",
                ",from_id",
                ",state",
                ",reason",
                ",[title]",
                ",[feature.pcr]",
                ",release_affected",
                ",Configuration",
                ",alpha_configuration",
                ",alpha_configuration_url",
                ",beta_configuration",
                ",beta_configuration_url",
                ",prod_configuration",
                ",prod_configuration_url",
                ",[feature.motivation]",
                ",submitted_by",
                ",[priority]",
                ",[owner]",
                ",[url]",
                ",[siip_category]",
                ",[stepping_fix]",
                ",SoC",
                ", tag",
                ", [component]",
                ",[ip_gen]",
                ",[sdl_required]",
                ",[AlphaMilestoneID]",
                ",[BetaMilestoneID]",
                ",[ProdMilestoneID]",
                ",null as version",
                ",alpha_date as alpha_version",
                ",beta_date as beta_version",
                ",prod_date as prod_version",
                ",alpha_releaseid as alpha_release_id",
                ",beta_releaseid as beta_release_id",
                ",prod_releaseid as prod_release_Id",
                ",[ReviewReadinessDate]",
                ",alpha_releasekey_url as alpha_release_key_url",
                ",beta_releasekey_url as beta_release_key_url",
                ",prod_releasekey_url as prod_release_key_url",
                ",[feature.milestone_open]",
                ",[totalID]",
                ",[post_EC_pending_CCB]",
                ",[submitted_org]",
                ",[stage_found]",
                ",Actual_Trend_Date",
                ",left (Actual_Trend_Date, 4) as [trenddate_year]",
                ",datepart(ww, Actual_Trend_Date) AS [trenddate_YYYYWW]",
                ",hsdes",
                ",reason_detail",
                "FROM [v_ipg_feature_historical]",
                "where id not in (6031517, 6031518, 6031522)",
                "-- 1406972505"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct ",
                  "tenant",
                  ",project as jira_project",
                  ",duedate",
                  ",duedate_ww as duedate_ww_hsdes",
                  ",left (duedate, 4) as [duedate_year]",
                  ",datepart(ww, duedate) AS [duedate_YYYYWW]",
                  ",reporter",
                  ",ww",
                  ",feature_issuetype",
                  ",feature_labels",
                  ",ProjectURL",
                  ",[ww_submitted_date]",
                  ",[currentww] ",
                  ",[id]",
                  ",Phase",
                  ",key",
                  ", [ipfamily] as [family]",
                  ",ip_supplier",
                  ", program as project",
                  ",[SoC Die]",
                  ",[SoC Die Name]",
                  ",status",
                  ",[HSDES Status]",
                  ",hsdes_jira_status",
                  ",[feature.team_filed]",
                  ",[summary_team_filed]",
                  ",isFWSW",
                  ",from_tenant",
                  ",from_id",
                  ",state",
                  ",reason",
                  ",[title]",
                  ",[feature.pcr]",
                  ",release_affected",
                  ",Configuration",
                  ",alpha_configuration",
                  ",alpha_configuration_url",
                  ",beta_configuration",
                  ",beta_configuration_url",
                  ",prod_configuration",
                  ",prod_configuration_url",
                  ",[feature.motivation]",
                  ",submitted_by",
                  ",[priority]",
                  ",[owner]",
                  ",[url]",
                  ",[siip_category]",
                  ",[stepping_fix]",
                  ",SoC",
                  ", tag",
                  ", [component]",
                  ",[ip_gen]",
                  ",[sdl_required]",
                  ",[AlphaMilestoneID]",
                  ",[BetaMilestoneID]",
                  ",[ProdMilestoneID]",
                  ",null as version",
                  ",alpha_date as alpha_version",
                  ",beta_date as beta_version",
                  ",prod_date as prod_version",
                  ",alpha_releaseid as alpha_release_id",
                  ",beta_releaseid as beta_release_id",
                  ",prod_releaseid as prod_release_Id",
                  ",[ReviewReadinessDate]",
                  ",alpha_releasekey_url as alpha_release_key_url",
                  ",beta_releasekey_url as beta_release_key_url",
                  ",prod_releasekey_url as prod_release_key_url",
                  ",[feature.milestone_open]",
                  ",[totalID]",
                  ",[post_EC_pending_CCB]",
                  ",[submitted_org]",
                  ",[stage_found]",
                  ",Actual_Trend_Date",
                  ",left (Actual_Trend_Date, 4) as [trenddate_year]",
                  ",datepart(ww, Actual_Trend_Date) AS [trenddate_YYYYWW]",
                  ",hsdes",
                  ",reason_detail",
                  "FROM [v_ipg_feature_historical]",
                  "where id not in (6031517, 6031518, 6031522)",
                  "-- 1406972505</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "totalcount",
            "expression": [
              "",
              "var isLive = CALCULATE(DISTINCTCOUNT(QueryFeature[id]), QueryFeature[FeatureLiveData] = 1)",
              "return ",
              "CALCULATE(isLive,QueryFeature[isFWSW] = 0)",
              "// Doing two steps because Filter within calculate will slow down the performance because of the bidirectional relationship with Dynamic tables"
            ]
          },
          {
            "name": "TotalCum",
            "expression": [
              "",
              "IF (",
              "    MAX ( QueryFeature[ww_submitted_date] ) <= MAX ( QueryFeature[currentww] ),",
              "    CALCULATE (",
              "        [totalcount],",
              "        FILTER (",
              "            ALL ( QueryFeature[ww_submitted_date] ),",
              "            QueryFeature[ww_submitted_date] <= MAX ( QueryFeature[ww_submitted_date] )",
              "        )",
              "    )",
              ")"
            ]
          },
          {
            "name": "FeatureWWsubmitted",
            "expression": [
              "",
              "VAR minww =",
              "    CALCULATE (",
              "        MIN ( QueryIntelCalendar[SubmittedYear])*100+1 ,",
              "        CROSSFILTER ( QueryFeature[ww_submitted_date], QueryIntelCalendar[Intel Year-Work Week], BOTH ),",
              "        ALL ( QueryIntelCalendar )",
              "    )",
              "VAR maxyear =",
              "    CALCULATE (",
              "        MAX ( QueryIntelCalendar[SubmittedYear] ),",
              "        CROSSFILTER ( QueryFeature[ww_submitted_date],QueryIntelCalendar[Intel Year-Work Week], BOTH ),",
              "        ALL ( QueryIntelCalendar )",
              "    )",
              "VAR maxww =",
              "    MAXX (",
              "        FILTER (",
              "            ALL ( QueryIntelCalendar ),",
              "            QueryIntelCalendar[SubmittedYear] = maxyear",
              "                && QueryIntelCalendar[Intel Year-Work Week] <=QueryIntelCalendar[currentww]",
              "        ),",
              "       QueryIntelCalendar[Intel Year-Work Week]",
              "    )",
              "VAR curww =",
              "    MIN ( QueryIntelCalendar[Intel Year-Work Week] )",
              "",
              "VAR result =",
              "    [totalcount]",
              "        + IF ( curww >= minww && curww <= maxww, 0 )",
              "RETURN",
              "    result"
            ]
          },
          {
            "name": "FeatureCumu",
            "expression": [
              "",
              "VAR minww =",
              "    CALCULATE (",
              "        MIN ( QueryIntelCalendar[SubmittedYear] )*100+1,",
              "        CROSSFILTER ( QueryFeature[ww_submitted_date], QueryIntelCalendar[Intel Year-Work Week], BOTH ),",
              "        ALL ( QueryIntelCalendar)",
              "    )",
              "VAR maxyear =",
              "    CALCULATE (",
              "        MAX ( QueryIntelCalendar[SubmittedYear] ),",
              "        CROSSFILTER ( QueryFeature[ww_submitted_date], QueryIntelCalendar[Intel Year-Work Week], BOTH ),",
              "        ALL ( QueryIntelCalendar)",
              "    )",
              "VAR maxww =",
              "    MAXX (",
              "        FILTER ( ALL ( QueryIntelCalendar ), ",
              "                QueryIntelCalendar[SubmittedYear] = maxyear",
              "                && QueryIntelCalendar[Intel Year-Work Week] <= QueryIntelCalendar[currentww] ),",
              "       QueryIntelCalendar[Intel Year-Work Week]",
              "    )",
              "VAR curww =",
              "    MIN ( QueryIntelCalendar[Intel Year-Work Week] )",
              "",
              "VAR CumFeatureCount =",
              "    IF (",
              "        MAX ( QueryFeature[ww_submitted_date]) <= MAX ( QueryFeature[currentww] ),",
              "        CALCULATE (",
              "           [totalcount],",
              "            FILTER (",
              "                ALL ( QueryIntelCalendar[Intel Year-Work Week] ),",
              "                QueryIntelCalendar[Intel Year-Work Week] <= MAX ( QueryIntelCalendar[Intel Year-Work Week]",
              "            )",
              "        )",
              "    ))",
              "",
              "VAR result =",
              "    CumFeatureCount",
              "        + IF ( curww >= minww && curww <= maxww, 0 )",
              "RETURN",
              "    result"
            ]
          },
          {
            "name": "totalcountHistorical",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryFeature[id]), QueryFeature[isFWSW] = 0, QueryFeature[13weeksSnapshotFilter]=1)"
          },
          {
            "name": "totaJiraCount",
            "expression": [
              "",
              "var islive = CALCULATE(DISTINCTCOUNT(QueryFeature[id]), QueryFeature[FeatureLiveData] =1)",
              "",
              "return",
              "CALCULATE(islive,  QueryFeature[JIRATenant] = 1)"
            ]
          },
          {
            "name": "FeaturesByStatus",
            "expression": [
              " ",
              "var stat=SelectedValue(All_Status[status])",
              "var stat_detail=SelectedValue(All_Status[status_detail])",
              "var offset=MIN(Delta_Value[Value])",
              "var manual_ECDate=If(COUNTROWS(WW_Value)=1, LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr], V_DIM_IntelWWSeqNbr[Intel Year-Work Week], MAX(WW_Value[Value])), BLANK())",
              "return ",
              "SWITCH(stat_detail, ",
              "\"FHAS AVAIL\", CALCULATE([totalcount], QueryFeature[status]=stat, QueryFeature[Feature_HAS_Complete]=\"Done\"),",
              "\"In Plan for EC\", ",
              "if(manual_ECDate=BLANK(), ",
              "CALCULATE([totalcount], Filter(QueryFeature, QueryFeature[Feature_HAS_Complete]<>\"Done\"&&QueryFeature[status]=stat&&QueryFeature[DueDateSeqNbr]<>BLANK()&&QueryFeature[DueDateSeqNbr]<=QueryFeature[ECDateSeqNbr]+offset)),",
              "CALCULATE([totalcount], Filter(QueryFeature, QueryFeature[Feature_HAS_Complete]<>\"Done\"&& QueryFeature[status]=stat&&QueryFeature[DueDateSeqNbr]<>BLANK()&&QueryFeature[DueDateSeqNbr]<=manual_ECDate+offset))),",
              "\"Outside of EC\",",
              "if(manual_ECDate=BLANK(),",
              " CALCULATE([totalcount], Filter(QueryFeature,  QueryFeature[Feature_HAS_Complete]<>\"Done\"&&QueryFeature[status]=stat&&QueryFeature[DueDateSeqNbr]<>BLANK()&&QueryFeature[DueDateSeqNbr]>QueryFeature[ECDateSeqNbr]+offset)),",
              "CALCULATE([totalcount], Filter(QueryFeature, QueryFeature[Feature_HAS_Complete]<>\"Done\"&& QueryFeature[status]=stat&&QueryFeature[DueDateSeqNbr]<>BLANK()&&QueryFeature[DueDateSeqNbr]>manual_ECDate+offset))),",
              "\"No Due Date\", CALCULATE([totalcount], QueryFeature[Feature_HAS_Complete]<>\"Done\",QueryFeature[status]=stat,QueryFeature[DueDateSeqNbr]=BLANK()),",
              "",
              "    CALCULATE([totalcount], QueryFeature[status]=stat))",
              ""
            ]
          },
          {
            "name": "FeaturesByCondensedStatus",
            "expression": [
              " ",
              "var stat=SelectedValue(All_Status[condense_status])",
              "var stat_detail=SelectedValue(All_Status[status_detail])",
              "var offset=MIN(Delta_Value[Value])",
              "var manual_ECDate=If(COUNTROWS(WW_Value)=1, LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr], V_DIM_IntelWWSeqNbr[Intel Year-Work Week], MAX(WW_Value[Value])), BLANK())",
              "return ",
              "SWITCH(stat_detail, ",
              "\"FHAS AVAIL\", CALCULATE([totalcount], CONTAINSSTRING(stat, QueryFeature[status]), QueryFeature[Feature_HAS_Complete]=\"Done\"),",
              "\"In Plan for EC\", ",
              "if(manual_ECDate=BLANK(), ",
              "CALCULATE([totalcount], Filter(QueryFeature, QueryFeature[Feature_HAS_Complete]<>\"Done\"&&CONTAINSSTRING(stat, QueryFeature[status])&&QueryFeature[DueDateSeqNbr]<>BLANK()&&QueryFeature[DueDateSeqNbr]<=QueryFeature[ECDateSeqNbr]+offset)),",
              "CALCULATE([totalcount], Filter(QueryFeature,  QueryFeature[Feature_HAS_Complete]<>\"Done\"&&CONTAINSSTRING(stat, QueryFeature[status])&&QueryFeature[DueDateSeqNbr]<>BLANK()&&QueryFeature[DueDateSeqNbr]<=manual_ECDate+offset))),",
              "\"Outside of EC\",",
              "if(manual_ECDate=BLANK(),",
              " CALCULATE([totalcount], Filter(QueryFeature,  QueryFeature[Feature_HAS_Complete]<>\"Done\"&&CONTAINSSTRING(stat, QueryFeature[status])&&QueryFeature[DueDateSeqNbr]<>BLANK()&&QueryFeature[DueDateSeqNbr]>QueryFeature[ECDateSeqNbr]+offset)),",
              "CALCULATE([totalcount], Filter(QueryFeature,  QueryFeature[Feature_HAS_Complete]<>\"Done\"&&CONTAINSSTRING(stat, QueryFeature[status])&&QueryFeature[DueDateSeqNbr]<>BLANK()&&QueryFeature[DueDateSeqNbr]>manual_ECDate+offset))),",
              "\"No Due Date\", CALCULATE([totalcount], QueryFeature[Feature_HAS_Complete]<>\"Done\",CONTAINSSTRING(stat, QueryFeature[status]),QueryFeature[DueDateSeqNbr]=BLANK()),",
              "",
              "    CALCULATE([totalcount], QueryFeature[status]=stat))",
              ""
            ]
          },
          {
            "name": "totaCompleteCount",
            "expression": [
              "",
              "var completecnt = CALCULATE(DISTINCTCOUNT(QueryFeature[id]), QueryFeature[Fhas_complete]=\"Complete\")",
              "",
              "return",
              "CALCULATE(completecnt,QueryFeature[Fhas_complete]=\"Complete\")"
            ]
          },
          {
            "name": "totaPlannedCount",
            "expression": [
              "",
              "var plancnt = CALCULATE(DISTINCTCOUNT(QueryFeature[id]), QueryFeature[Fhas_Planned]=\" Planned\")",
              "",
              "return",
              "CALCULATE(plancnt,  QueryFeature[Fhas_Planned]=\" Planned\")"
            ]
          },
          {
            "name": "totalcount_progress",
            "expression": [
              "",
              "var isLive = CALCULATE(DISTINCTCOUNT(QueryFeature[id]), QueryFeature[FeatureLiveData] = 1)",
              "return ",
              "CALCULATE(isLive,QueryFeature[isFWSW] = 0)+ 0",
              "// Doing two steps because Filter within calculate will slow down the performance because of the bidirectional relationship with Dynamic tables"
            ]
          },
          {
            "name": "totalcount_prog",
            "expression": [
              "",
              " IF(HASONEVALUE(Progress_ww_map[Value]),IF(LASTNONBLANK(Progress_ww_map[Value],1)=\" Planned\",[totaPlannedCount],IF(LASTNONBLANK(Progress_ww_map[Value],1)=\"Complete\",[totaCompleteCount],[totanodateCount])),[totalcnt_prog])",
              ""
            ]
          },
          {
            "name": "totanodateCount",
            "expression": [
              "",
              "var completecnt = CALCULATE(DISTINCTCOUNT(QueryFeature[id]), QueryFeature[Fhas_Planned]=\"\", QueryFeature[Fhas_complete]=\"\")",
              "",
              "return",
              "CALCULATE(completecnt,QueryFeature[Fhas_Planned]=\"\",QueryFeature[Fhas_complete]=\"\")"
            ]
          },
          {
            "name": "totalcnt_prog",
            "expression": [
              " CALCULATE(DISTINCTCOUNT(QueryFeature[id]),QueryFeature[Fhas_Planned]in{\" Planned\",\"\"},QueryFeature[Fhas_complete]in{\"Complete\",\"\"})",
              ""
            ]
          },
          {
            "name": "totaPlannedCount_trend",
            "expression": [
              "",
              "var plancnt = CALCULATE(DISTINCTCOUNT(QueryFeature[id]), QueryFeature[Fhas_Planned_trend]=\" Planned\")",
              "",
              "return",
              "CALCULATE(plancnt,  QueryFeature[Fhas_Planned_trend]=\" Planned\")"
            ]
          },
          {
            "name": "totalcount_prog_trend",
            "expression": [
              "",
              " IF(HASONEVALUE(Progress_ww_map_trend[Value]),IF(LASTNONBLANK(Progress_ww_map_trend[Value],1)=\" Planned\",[totaPlannedCount_trend],IF(LASTNONBLANK(Progress_ww_map_trend[Value],1)=\"Complete\",[totaCompleteCount],[totanodateCount_trend])),[totalcnt_prog_trend])",
              ""
            ]
          },
          {
            "name": "totalcnt_prog_trend",
            "expression": " CALCULATE(DISTINCTCOUNT(QueryFeature[id]),QueryFeature[Fhas_Planned_trend]in{\" Planned\",\"\"},QueryFeature[Fhas_complete]in{\"Complete\",\"\"})"
          },
          {
            "name": "Final_Total_Cnt",
            "expression": "SWITCH(LASTNONBLANK(v_date_type[Value],0) ,1,[totalcount_prog_trend],2,[totalcount_prog],3,[totalcount_prog_trend_due],[totalcount_prog])"
          },
          {
            "name": "totanodateCount_trend",
            "expression": [
              "",
              "var completecnt = CALCULATE(DISTINCTCOUNT(QueryFeature[id]), QueryFeature[Fhas_Planned_trend]=\"\", QueryFeature[Fhas_complete]=\"\")",
              "",
              "return",
              "CALCULATE(completecnt,QueryFeature[Fhas_Planned_trend]=\"\",QueryFeature[Fhas_complete]=\"\")"
            ]
          },
          {
            "name": "totaPlannedCount_trend_due",
            "expression": [
              "",
              "var plancnt = CALCULATE(DISTINCTCOUNT(QueryFeature[id]), QueryFeature[Fhas_planned_trend_due]=\" Planned\")",
              "",
              "return",
              "CALCULATE(plancnt,  QueryFeature[Fhas_planned_trend_due]=\" Planned\")"
            ]
          },
          {
            "name": "totalcount_prog_trend_due",
            "expression": [
              "",
              " IF(HASONEVALUE(Progress_ww_map_trend_due[Value]),IF(LASTNONBLANK(Progress_ww_map_trend_due[Value],1)=\" Planned\",[totaPlannedCount_trend_due],IF(LASTNONBLANK(Progress_ww_map_trend_due[Value],1)=\"Complete\",[totaCompleteCount],[totanodateCount_trend_due])),[totalcnt_prog_trend])",
              ""
            ]
          },
          {
            "name": "totalcnt_prog_trend_due",
            "expression": " CALCULATE(DISTINCTCOUNT(QueryFeature[id]),QueryFeature[Fhas_planned_trend_due]in{\" Planned\",\"\"},QueryFeature[Fhas_complete]in{\"Complete\",\"\"})"
          },
          {
            "name": "totanodateCount_trend_due",
            "expression": [
              "",
              "var completecnt = CALCULATE(DISTINCTCOUNT(QueryFeature[id]), QueryFeature[Fhas_planned_trend_due]=\"\", QueryFeature[Fhas_complete]=\"\")",
              "",
              "return",
              "CALCULATE(completecnt,QueryFeature[Fhas_planned_trend_due]=\"\",QueryFeature[Fhas_complete]=\"\")"
            ]
          },
          {
            "name": "FeaturesByStatusTrend",
            "expression": [
              " ",
              "var stat=SelectedValue(All_Status[status])",
              "var stat_detail=SelectedValue(All_Status[status_detail])",
              "var offset=MIN(Delta_Value[Value])",
              "var manual_ECDate=If(COUNTROWS(WW_Value)=1, LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr], V_DIM_IntelWWSeqNbr[Intel Year-Work Week], MAX(WW_Value[Value])), BLANK())",
              "return ",
              "SWITCH(stat_detail, ",
              "\"FHAS AVAIL\", CALCULATE([totalcount], QueryFeature[status]=stat, QueryFeature[Feature_HAS_CompleteTrend]=\"Done\"),",
              "\"In Plan for EC\", ",
              "if(manual_ECDate=BLANK(), ",
              "CALCULATE([totalcount], Filter(QueryFeature, QueryFeature[Feature_HAS_CompleteTrend]<>\"Done\"&&QueryFeature[status]=stat&&QueryFeature[TrendDateSeqNbr]<>BLANK()&&QueryFeature[TrendDateSeqNbr]<=QueryFeature[ECDateSeqNbr]+offset)),",
              "CALCULATE([totalcount], Filter(QueryFeature, QueryFeature[Feature_HAS_CompleteTrend]<>\"Done\"&& QueryFeature[status]=stat&&QueryFeature[TrendDateSeqNbr]<>BLANK()&&QueryFeature[TrendDateSeqNbr]<=manual_ECDate+offset))),",
              "\"Outside of EC\",",
              "if(manual_ECDate=BLANK(),",
              " CALCULATE([totalcount], Filter(QueryFeature,  QueryFeature[Feature_HAS_CompleteTrend]<>\"Done\"&&QueryFeature[status]=stat&&QueryFeature[TrendDateSeqNbr]<>BLANK()&&QueryFeature[TrendDateSeqNbr]>QueryFeature[ECDateSeqNbr]+offset)),",
              "CALCULATE([totalcount], Filter(QueryFeature, QueryFeature[Feature_HAS_CompleteTrend]<>\"Done\"&& QueryFeature[status]=stat&&QueryFeature[TrendDateSeqNbr]<>BLANK()&&QueryFeature[TrendDateSeqNbr]>manual_ECDate+offset))),",
              "\"No Due Date\", CALCULATE([totalcount], QueryFeature[Feature_HAS_CompleteTrend]<>\"Done\",QueryFeature[status]=stat,QueryFeature[TrendDateSeqNbr]=BLANK()),",
              "",
              "    CALCULATE([totalcount], QueryFeature[status]=stat))"
            ]
          },
          {
            "name": "FeaturesByStatusTrendDue",
            "expression": [
              " ",
              "var stat=SelectedValue(All_Status[status])",
              "var stat_detail=SelectedValue(All_Status[status_detail])",
              "var offset=MIN(Delta_Value[Value])",
              "var manual_ECDate=If(COUNTROWS(WW_Value)=1, LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr], V_DIM_IntelWWSeqNbr[Intel Year-Work Week], MAX(WW_Value[Value])), BLANK())",
              "return ",
              "SWITCH(stat_detail, ",
              "\"FHAS AVAIL\", CALCULATE([totalcount], QueryFeature[status]=stat, QueryFeature[Feature_HAS_CompleteTrendDue]=\"Done\"),",
              "\"In Plan for EC\", ",
              "if(manual_ECDate=BLANK(), ",
              "CALCULATE([totalcount], Filter(QueryFeature, QueryFeature[Feature_HAS_CompleteTrendDue]<>\"Done\"&&QueryFeature[status]=stat&&QueryFeature[TrendDueDateSeqNbr]<>BLANK()&&QueryFeature[TrendDueDateSeqNbr]<=QueryFeature[ECDateSeqNbr]+offset)),",
              "CALCULATE([totalcount], Filter(QueryFeature, QueryFeature[Feature_HAS_CompleteTrendDue]<>\"Done\"&& QueryFeature[status]=stat&&QueryFeature[TrendDueDateSeqNbr]<>BLANK()&&QueryFeature[TrendDueDateSeqNbr]<=manual_ECDate+offset))),",
              "\"Outside of EC\",",
              "if(manual_ECDate=BLANK(),",
              " CALCULATE([totalcount], Filter(QueryFeature,  QueryFeature[Feature_HAS_CompleteTrendDue]<>\"Done\"&&QueryFeature[status]=stat&&QueryFeature[TrendDueDateSeqNbr]<>BLANK()&&QueryFeature[TrendDueDateSeqNbr]>QueryFeature[ECDateSeqNbr]+offset)),",
              "CALCULATE([totalcount], Filter(QueryFeature, QueryFeature[Feature_HAS_CompleteTrendDue]<>\"Done\"&& QueryFeature[status]=stat&&QueryFeature[TrendDueDateSeqNbr]<>BLANK()&&QueryFeature[TrendDueDateSeqNbr]>manual_ECDate+offset))),",
              "\"No Due Date\", CALCULATE([totalcount], QueryFeature[Feature_HAS_CompleteTrendDue]<>\"Done\",QueryFeature[status]=stat,QueryFeature[TrendDueDateSeqNbr]=BLANK()),",
              "",
              "    CALCULATE([totalcount], QueryFeature[status]=stat))"
            ]
          },
          {
            "name": "FeaturesByCondensedStatusTrend",
            "expression": [
              " ",
              "var stat=SelectedValue(All_Status[condense_status])",
              "var stat_detail=SelectedValue(All_Status[status_detail])",
              "var offset=MIN(Delta_Value[Value])",
              "var manual_ECDate=If(COUNTROWS(WW_Value)=1, LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr], V_DIM_IntelWWSeqNbr[Intel Year-Work Week], MAX(WW_Value[Value])), BLANK())",
              "return ",
              "SWITCH(stat_detail, ",
              "\"FHAS AVAIL\", CALCULATE([totalcount], CONTAINSSTRING(stat, QueryFeature[status]), QueryFeature[Feature_HAS_Complete]=\"Done\"),",
              "\"In Plan for EC\", ",
              "if(manual_ECDate=BLANK(), ",
              "CALCULATE([totalcount], Filter(QueryFeature, QueryFeature[Feature_HAS_Complete]<>\"Done\"&&CONTAINSSTRING(stat, QueryFeature[status])&&QueryFeature[TrendDateSeqNbr]<>BLANK()&&QueryFeature[TrendDateSeqNbr]<=QueryFeature[ECDateSeqNbr]+offset)),",
              "CALCULATE([totalcount], Filter(QueryFeature,  QueryFeature[Feature_HAS_Complete]<>\"Done\"&&CONTAINSSTRING(stat, QueryFeature[status])&&QueryFeature[TrendDateSeqNbr]<>BLANK()&&QueryFeature[TrendDateSeqNbr]<=manual_ECDate+offset))),",
              "\"Outside of EC\",",
              "if(manual_ECDate=BLANK(),",
              " CALCULATE([totalcount], Filter(QueryFeature,  QueryFeature[Feature_HAS_Complete]<>\"Done\"&&CONTAINSSTRING(stat, QueryFeature[status])&&QueryFeature[TrendDateSeqNbr]<>BLANK()&&QueryFeature[TrendDateSeqNbr]>QueryFeature[ECDateSeqNbr]+offset)),",
              "CALCULATE([totalcount], Filter(QueryFeature,  QueryFeature[Feature_HAS_Complete]<>\"Done\"&&CONTAINSSTRING(stat, QueryFeature[status])&&QueryFeature[TrendDateSeqNbr]<>BLANK()&&QueryFeature[TrendDateSeqNbr]>manual_ECDate+offset))),",
              "\"No Due Date\", CALCULATE([totalcount], QueryFeature[Feature_HAS_Complete]<>\"Done\",CONTAINSSTRING(stat, QueryFeature[status]),QueryFeature[TrendDateSeqNbr]=BLANK()),",
              "",
              "    CALCULATE([totalcount], QueryFeature[status]=stat))",
              ""
            ]
          },
          {
            "name": "FeaturesByCondensedStatusTrendDue",
            "expression": [
              " ",
              "var stat=SelectedValue(All_Status[condense_status])",
              "var stat_detail=SelectedValue(All_Status[status_detail])",
              "var offset=MIN(Delta_Value[Value])",
              "var manual_ECDate=If(COUNTROWS(WW_Value)=1, LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr], V_DIM_IntelWWSeqNbr[Intel Year-Work Week], MAX(WW_Value[Value])), BLANK())",
              "return ",
              "SWITCH(stat_detail, ",
              "\"FHAS AVAIL\", CALCULATE([totalcount], CONTAINSSTRING(stat, QueryFeature[status]), QueryFeature[Feature_HAS_Complete]=\"Done\"),",
              "\"In Plan for EC\", ",
              "if(manual_ECDate=BLANK(), ",
              "CALCULATE([totalcount], Filter(QueryFeature, QueryFeature[Feature_HAS_Complete]<>\"Done\"&&CONTAINSSTRING(stat, QueryFeature[status])&&QueryFeature[TrendDueDateSeqNbr]<>BLANK()&&QueryFeature[DueDateSeqNbr]<=QueryFeature[ECDateSeqNbr]+offset)),",
              "CALCULATE([totalcount], Filter(QueryFeature,  QueryFeature[Feature_HAS_Complete]<>\"Done\"&&CONTAINSSTRING(stat, QueryFeature[status])&&QueryFeature[DueDateSeqNbr]<>BLANK()&&QueryFeature[DueDateSeqNbr]<=manual_ECDate+offset))),",
              "\"Outside of EC\",",
              "if(manual_ECDate=BLANK(),",
              " CALCULATE([totalcount], Filter(QueryFeature,  QueryFeature[Feature_HAS_Complete]<>\"Done\"&&CONTAINSSTRING(stat, QueryFeature[status])&&QueryFeature[TrendDueDateSeqNbr]<>BLANK()&&QueryFeature[TrendDueDateSeqNbr]>QueryFeature[ECDateSeqNbr]+offset)),",
              "CALCULATE([totalcount], Filter(QueryFeature,  QueryFeature[Feature_HAS_Complete]<>\"Done\"&&CONTAINSSTRING(stat, QueryFeature[status])&&QueryFeature[TrendDueDateSeqNbr]<>BLANK()&&QueryFeature[TrendDueDateSeqNbr]>manual_ECDate+offset))),",
              "\"No Due Date\", CALCULATE([totalcount], QueryFeature[Feature_HAS_Complete]<>\"Done\",CONTAINSSTRING(stat, QueryFeature[status]),QueryFeature[TrendDueDateSeqNbr]=BLANK()),",
              "",
              "    CALCULATE([totalcount], QueryFeature[status]=stat))",
              ""
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct ",
              "tenant",
              ",project as jira_project",
              ",duedate",
              ",duedate_ww as duedate_ww_hsdes",
              ",left (duedate, 4) as [duedate_year]",
              ",datepart(ww, duedate) AS [duedate_YYYYWW]",
              ",reporter",
              ",ww",
              ",feature_issuetype",
              ",feature_labels",
              ",ProjectURL",
              ",[ww_submitted_date]",
              ",[currentww] ",
              ",[id]",
              ",Phase",
              ",key",
              ", [ipfamily] as [family]",
              ",ip_supplier",
              ", program as project",
              ",[SoC Die]",
              ",[SoC Die Name]",
              ",status",
              ",[HSDES Status]",
              ",hsdes_jira_status",
              ",[feature.team_filed]",
              ",[summary_team_filed]",
              ",isFWSW",
              ",from_tenant",
              ",from_id",
              ",state",
              ",reason",
              ",[title]",
              ",[feature.pcr]",
              ",release_affected",
              ",Configuration",
              ",alpha_configuration",
              ",alpha_configuration_url",
              ",beta_configuration",
              ",beta_configuration_url",
              ",prod_configuration",
              ",prod_configuration_url",
              ",[feature.motivation]",
              ",submitted_by",
              ",[priority]",
              ",[owner]",
              ",[url]",
              ",[siip_category]",
              ",[stepping_fix]",
              ",SoC",
              ", tag",
              ", [component]",
              ",[ip_gen]",
              ",[sdl_required]",
              ",[AlphaMilestoneID]",
              ",[BetaMilestoneID]",
              ",[ProdMilestoneID]",
              ",null as version",
              ",alpha_date as alpha_version",
              ",beta_date as beta_version",
              ",prod_date as prod_version",
              ",alpha_releaseid as alpha_release_id",
              ",beta_releaseid as beta_release_id",
              ",prod_releaseid as prod_release_Id",
              ",[ReviewReadinessDate]",
              ",alpha_releasekey_url as alpha_release_key_url",
              ",beta_releasekey_url as beta_release_key_url",
              ",prod_releasekey_url as prod_release_key_url",
              ",[feature.milestone_open]",
              ",[totalID]",
              ",[post_EC_pending_CCB]",
              ",[submitted_org]",
              ",[stage_found]",
              ",Actual_Trend_Date",
              ",left (Actual_Trend_Date, 4) as [trenddate_year]",
              ",datepart(ww, Actual_Trend_Date) AS [trenddate_YYYYWW]",
              ",hsdes",
              ",reason_detail",
              "FROM [v_ipg_feature_historical]",
              "where id not in (6031517, 6031518, 6031522)",
              "-- 1406972505"
            ]
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct ",
              "tenant",
              ",project as jira_project",
              ",duedate",
              ",duedate_ww as duedate_ww_hsdes",
              ",left (duedate, 4) as [duedate_year]",
              ",datepart(ww, duedate) AS [duedate_YYYYWW]",
              ",reporter",
              ",ww",
              ",feature_issuetype",
              ",feature_labels",
              ",ProjectURL",
              ",[ww_submitted_date]",
              ",[currentww] ",
              ",[id]",
              ",Phase",
              ",key",
              ", [ipfamily] as [family]",
              ",ip_supplier",
              ", program as project",
              ",[SoC Die]",
              ",[SoC Die Name]",
              ",status",
              ",[HSDES Status]",
              ",hsdes_jira_status",
              ",[feature.team_filed]",
              ",[summary_team_filed]",
              ",isFWSW",
              ",from_tenant",
              ",from_id",
              ",state",
              ",reason",
              ",[title]",
              ",[feature.pcr]",
              ",release_affected",
              ",Configuration",
              ",alpha_configuration",
              ",alpha_configuration_url",
              ",beta_configuration",
              ",beta_configuration_url",
              ",prod_configuration",
              ",prod_configuration_url",
              ",[feature.motivation]",
              ",submitted_by",
              ",[priority]",
              ",[owner]",
              ",[url]",
              ",[siip_category]",
              ",[stepping_fix]",
              ",SoC",
              ", tag",
              ", [component]",
              ",[ip_gen]",
              ",[sdl_required]",
              ",[AlphaMilestoneID]",
              ",[BetaMilestoneID]",
              ",[ProdMilestoneID]",
              ",null as version",
              ",alpha_date as alpha_version",
              ",beta_date as beta_version",
              ",prod_date as prod_version",
              ",alpha_releaseid as alpha_release_id",
              ",beta_releaseid as beta_release_id",
              ",prod_releaseid as prod_release_Id",
              ",[ReviewReadinessDate]",
              ",alpha_releasekey_url as alpha_release_key_url",
              ",beta_releasekey_url as beta_release_key_url",
              ",prod_releasekey_url as prod_release_key_url",
              ",[feature.milestone_open]",
              ",[totalID]",
              ",[post_EC_pending_CCB]",
              ",[submitted_org]",
              ",[stage_found]",
              ",Actual_Trend_Date",
              ",left (Actual_Trend_Date, 4) as [trenddate_year]",
              ",datepart(ww, Actual_Trend_Date) AS [trenddate_YYYYWW]",
              ",hsdes",
              ",reason_detail",
              "FROM [v_ipg_feature_historical]",
              "where id not in (6031517, 6031518, 6031522)",
              "-- 1406972505</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryIntelCalendar",
        "columns": [
          {
            "name": "Intel Year-Work Week",
            "dataType": "int64",
            "sourceColumn": "Intel Year-Work Week"
          },
          {
            "name": "Intel Quarter",
            "dataType": "string",
            "sourceColumn": "Intel Quarter"
          },
          {
            "name": "Intel Month",
            "dataType": "int64",
            "sourceColumn": "Intel Month"
          },
          {
            "type": "calculated",
            "name": "Intel Month Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "If([Intel Month] = 1, \"Jan\", if([Intel Month] = 2, \"Feb\", if([Intel Month]=3, \"Mar\", if([Intel Month] = 4, \"Apr\", if([Intel Month]=5, \"May\", If([Intel Month]=6, \"Jun\", If([Intel Month]=7, \"Jul\", if([Intel Month]=8, \"Aug\", if([Intel Month]=9, \"Sept\", if([Intel Month]=10, \"Oct\", if([Intel Month]=11, \"Nov\", if([Intel Month]=12, \"Dec\", blank()))))))))))))"
          },
          {
            "name": "currentww",
            "dataType": "int64",
            "sourceColumn": "currentww"
          },
          {
            "name": "SubmittedYear",
            "dataType": "string",
            "sourceColumn": "SubmittedYear"
          },
          {
            "type": "calculated",
            "name": "Quarter_Sorting",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "COUNTROWS (",
              "    FILTER (",
              "        QueryIntelCalendar,",
              "        QueryIntelCalendar[SubmittedYear] < EARLIER ( QueryIntelCalendar[SubmittedYear] )",
              "            || QueryIntelCalendar[SubmittedYear] = EARLIER ( QueryIntelCalendar[SubmittedYear] )",
              "                && QueryIntelCalendar[Intel Quarter] <= EARLIER ( QueryIntelCalendar[Intel Quarter] )",
              "    )",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Year_Quarter_NBR",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "QueryIntelCalendar[SubmittedYear]&[intelquarter]",
              ""
            ]
          },
          {
            "name": "intelquarter",
            "dataType": "string",
            "sourceColumn": "intelquarter"
          },
          {
            "type": "calculated",
            "name": "Year_Quarter",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "QueryIntelCalendar[SubmittedYear]&[Intel Quarter]"
          }
        ],
        "partitions": [
          {
            "name": "QueryIntelCalendar",
            "source": {
              "type": "query",
              "query": [
                "select distinct [Intel Year-Work Week]",
                ", left([Intel Year-Work Week], 4) as SubmittedYear ",
                ",[intel Quarter]",
                ",right([intel Quarter],1) as [intelquarter]",
                ",[Intel Month]",
                ",datepart(ww,getutcdate()) as [currentww]",
                "from [V_TIME_DAY_CachedTable]",
                "order by [Intel Year-Work Week] desc"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week]",
                  ", left([Intel Year-Work Week], 4) as SubmittedYear ",
                  ",[intel Quarter]",
                  ",right([intel Quarter],1) as [intelquarter]",
                  ",[Intel Month]",
                  ",datepart(ww,getutcdate()) as [currentww]",
                  "from [V_TIME_DAY_CachedTable]",
                  "order by [Intel Year-Work Week] desc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [Intel Year-Work Week]",
              ", left([Intel Year-Work Week], 4) as SubmittedYear ",
              ",[intel Quarter]",
              ",right([intel Quarter],1) as [intelquarter]",
              ",[Intel Month]",
              ",datepart(ww,getutcdate()) as [currentww]",
              "from [V_TIME_DAY_CachedTable]",
              "order by [Intel Year-Work Week] desc"
            ]
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week]",
              ", left([Intel Year-Work Week], 4) as SubmittedYear ",
              ",[intel Quarter]",
              ",right([intel Quarter],1) as [intelquarter]",
              ",[Intel Month]",
              ",datepart(ww,getutcdate()) as [currentww]",
              "from [V_TIME_DAY_CachedTable]",
              "order by [Intel Year-Work Week] desc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "V_DIM_IntelWWSeqNbr",
        "columns": [
          {
            "name": "Intel Year-Work Week",
            "dataType": "int64",
            "sourceColumn": "Intel Year-Work Week"
          },
          {
            "type": "calculated",
            "name": "WWSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "CALCULATE(COUNTROWS(V_DIM_IntelWWSeqNbr), V_DIM_IntelWWSeqNbr[Intel Year-Work Week]<=EARLIER(V_DIM_IntelWWSeqNbr[Intel Year-Work Week]))"
          }
        ],
        "partitions": [
          {
            "name": "QueryIntelWWSeqNbr",
            "source": {
              "type": "query",
              "query": [
                "select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
                "order by [Intel Year-Work Week] desc"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
                  "order by [Intel Year-Work Week] desc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
              "order by [Intel Year-Work Week] desc"
            ]
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
              "order by [Intel Year-Work Week] desc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryProductTapein",
        "columns": [
          {
            "name": "product",
            "dataType": "string",
            "sourceColumn": "product"
          },
          {
            "name": "TrendYYYYWW",
            "dataType": "string",
            "sourceColumn": "TrendYYYYWW"
          },
          {
            "name": "SourceofData",
            "dataType": "string",
            "sourceColumn": "SourceofData"
          },
          {
            "name": "currentww",
            "dataType": "int64",
            "sourceColumn": "currentww"
          },
          {
            "type": "calculated",
            "name": "currentWWSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr],V_DIM_IntelWWSeqNbr[Intel Year-Work Week],[currentww])"
          },
          {
            "type": "calculated",
            "name": "26WeeksPriorTI",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "[TapeinSeqNbr]-26"
          },
          {
            "type": "calculated",
            "name": "TapeinSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(V_DIM_IntelWWSeqNbr[WWSeqNbr],V_DIM_IntelWWSeqNbr[Intel Year-Work Week],[TapeinDate])"
          },
          {
            "type": "calculated",
            "name": "TapeinDate",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "VALUE([TrendYYYYWW])"
          },
          {
            "type": "calculated",
            "name": "Is26WPriorTapein",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if([CurrentwwSeqNbr]>=[26WeeksPriorTI]&&[CurrentwwSeqNbr]<=[TapeinSeqNbr], \"yes\", \"no\")"
          }
        ],
        "partitions": [
          {
            "name": "QueryProductTapein",
            "source": {
              "type": "query",
              "query": "select distinct product, trendyyyyww, sourceofData, datepart(ww, getutcdate()) as [currentww] from [cig_product_ti_cached]",
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct product, trendyyyyww, sourceofData, datepart(ww, getutcdate()) as [currentww] from [cig_product_ti_cached]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select distinct product, trendyyyyww, sourceofData, datepart(ww, getutcdate()) as [currentww] from [cig_product_ti_cached]"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct product, trendyyyyww, sourceofData, datepart(ww, getutcdate()) as [currentww] from [cig_product_ti_cached]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "QueryProductTapeinSeqNbr",
        "columns": [
          {
            "name": "Intel Year-Work Week",
            "dataType": "int64",
            "sourceColumn": "Intel Year-Work Week"
          },
          {
            "type": "calculated",
            "name": "WWSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "CALCULATE(COUNTROWS(QueryProductTapeinSeqNbr), QueryProductTapeinSeqNbr[Intel Year-Work Week]<=EARLIER(QueryProductTapeinSeqNbr[Intel Year-Work Week]))"
          }
        ],
        "partitions": [
          {
            "name": "QueryProductTapeinSeqNbr",
            "source": {
              "type": "query",
              "query": [
                "select distinct [Intel Year-Work Week]",
                " from [V_TIME_DAY_CachedTable]",
                "order by [Intel Year-Work Week] desc"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week]",
                  " from [V_TIME_DAY_CachedTable]",
                  "order by [Intel Year-Work Week] desc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week]",
              " from [V_TIME_DAY_CachedTable]",
              "order by [Intel Year-Work Week] desc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          },
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [Intel Year-Work Week]",
              " from [V_TIME_DAY_CachedTable]",
              "order by [Intel Year-Work Week] desc"
            ]
          }
        ]
      },
      {
        "name": "QueryRTL1p0",
        "columns": [
          {
            "name": "project",
            "dataType": "string",
            "sourceColumn": "project"
          },
          {
            "name": "ipfamily",
            "dataType": "string",
            "sourceColumn": "ipfamily"
          },
          {
            "name": "EarliestRTL1p0Date",
            "dataType": "int64",
            "sourceColumn": "EarliestRTL1p0Date"
          },
          {
            "name": "currentww",
            "dataType": "int64",
            "sourceColumn": "currentww"
          },
          {
            "type": "calculated",
            "name": "pfKey",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[project]&\"/\"&[ipfamily]"
          },
          {
            "name": "LatestRTL1p0Date",
            "dataType": "int64",
            "sourceColumn": "LatestRTL1p0Date"
          }
        ],
        "partitions": [
          {
            "name": "QueryRTL1p0",
            "source": {
              "type": "query",
              "query": [
                "--starting to break data for requestingproducts/usingproducts",
                "select ",
                "name as [project]",
                ",ipfamily",
                ",[currentww] ",
                ", min([EarliestRTL1p0Date]) as [EarliestRTL1p0Date] --to get the earliest date among several same project/ipfamily with different configuration",
                ",min([LatestRTL1p0Date]) as [LatestRTL1p0Date]",
                "",
                "from ",
                "( ",
                "--Find a pair of product/ipfamily for NonPIC and PIC data",
                "select ",
                "requestingproducts as [productlist]",
                ",ipfamily",
                ",'nonPIC' as [Category]",
                ", min([TrendYYYYWW]) as [EarliestRTL1p0Date]",
                ",max([TrendYYYYWW]) as [LatestRTL1p0Date]",
                ",datepart(ww, getutcdate()) as [currentww] ",
                "from [v_ipg_carbon_milestone] a",
                "join [ipg_devsuborg_cached] b",
                "on a.devsuborg = b.devsuborg",
                "WHERE 1=1",
                "and[drop] = 'RTL1p0' ",
                "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
                "and [DropType] in ('Standard')",
                "and [TrendYYYYWW] <>''",
                "group by requestingproducts, ipfamily",
                "",
                "UNION ALL",
                "",
                "select ",
                "usingproducts as [productlist]",
                ",ipfamily",
                ",'PIC' as [Category]",
                ", min([TrendYYYYWW]) as [EarliestRTL1p0Date]",
                ",max([TrendYYYYWW]) as [LatestRTL1p0Date]",
                ",datepart(ww, getutcdate()) as [currentww] ",
                "from [v_ipg_carbon_milestone] a",
                "join [ipg_devsuborg_cached] b",
                "on a.devsuborg = b.devsuborg",
                "where 1=1",
                "and[drop] = 'RTL1p0' ",
                "and [reuse] in ('configurable')",
                "and [DropType] in ('Standard')",
                "and [TrendYYYYWW] <>''",
                "group by usingproducts, ipfamily",
                ") finalset",
                "left join  [v_dss_product] map on ','+finalset.[productlist] +',' like '%,' + map.name  + ',%'",
                "group by ",
                "name ",
                ",ipfamily",
                ",currentww"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>--starting to break data for requestingproducts/usingproducts",
                  "select ",
                  "name as [project]",
                  ",ipfamily",
                  ",[currentww] ",
                  ", min([EarliestRTL1p0Date]) as [EarliestRTL1p0Date] --to get the earliest date among several same project/ipfamily with different configuration",
                  ",min([LatestRTL1p0Date]) as [LatestRTL1p0Date]",
                  "",
                  "from ",
                  "( ",
                  "--Find a pair of product/ipfamily for NonPIC and PIC data",
                  "select ",
                  "requestingproducts as [productlist]",
                  ",ipfamily",
                  ",'nonPIC' as [Category]",
                  ", min([TrendYYYYWW]) as [EarliestRTL1p0Date]",
                  ",max([TrendYYYYWW]) as [LatestRTL1p0Date]",
                  ",datepart(ww, getutcdate()) as [currentww] ",
                  "from [v_ipg_carbon_milestone] a",
                  "join [ipg_devsuborg_cached] b",
                  "on a.devsuborg = b.devsuborg",
                  "WHERE 1=1",
                  "and[drop] = 'RTL1p0' ",
                  "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
                  "and [DropType] in ('Standard')",
                  "and [TrendYYYYWW] <>''",
                  "group by requestingproducts, ipfamily",
                  "",
                  "UNION ALL",
                  "",
                  "select ",
                  "usingproducts as [productlist]",
                  ",ipfamily",
                  ",'PIC' as [Category]",
                  ", min([TrendYYYYWW]) as [EarliestRTL1p0Date]",
                  ",max([TrendYYYYWW]) as [LatestRTL1p0Date]",
                  ",datepart(ww, getutcdate()) as [currentww] ",
                  "from [v_ipg_carbon_milestone] a",
                  "join [ipg_devsuborg_cached] b",
                  "on a.devsuborg = b.devsuborg",
                  "where 1=1",
                  "and[drop] = 'RTL1p0' ",
                  "and [reuse] in ('configurable')",
                  "and [DropType] in ('Standard')",
                  "and [TrendYYYYWW] <>''",
                  "group by usingproducts, ipfamily",
                  ") finalset",
                  "left join  [v_dss_product] map on ','+finalset.[productlist] +',' like '%,' + map.name  + ',%'",
                  "group by ",
                  "name ",
                  ",ipfamily",
                  ",currentww</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "--starting to break data for requestingproducts/usingproducts",
              "select ",
              "name as [project]",
              ",ipfamily",
              ",[currentww] ",
              ", min([EarliestRTL1p0Date]) as [EarliestRTL1p0Date] --to get the earliest date among several same project/ipfamily with different configuration",
              ",min([LatestRTL1p0Date]) as [LatestRTL1p0Date]",
              "",
              "from ",
              "( ",
              "--Find a pair of product/ipfamily for NonPIC and PIC data",
              "select ",
              "requestingproducts as [productlist]",
              ",ipfamily",
              ",'nonPIC' as [Category]",
              ", min([TrendYYYYWW]) as [EarliestRTL1p0Date]",
              ",max([TrendYYYYWW]) as [LatestRTL1p0Date]",
              ",datepart(ww, getutcdate()) as [currentww] ",
              "from [v_ipg_carbon_milestone] a",
              "join [ipg_devsuborg_cached] b",
              "on a.devsuborg = b.devsuborg",
              "WHERE 1=1",
              "and[drop] = 'RTL1p0' ",
              "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
              "and [DropType] in ('Standard')",
              "and [TrendYYYYWW] <>''",
              "group by requestingproducts, ipfamily",
              "",
              "UNION ALL",
              "",
              "select ",
              "usingproducts as [productlist]",
              ",ipfamily",
              ",'PIC' as [Category]",
              ", min([TrendYYYYWW]) as [EarliestRTL1p0Date]",
              ",max([TrendYYYYWW]) as [LatestRTL1p0Date]",
              ",datepart(ww, getutcdate()) as [currentww] ",
              "from [v_ipg_carbon_milestone] a",
              "join [ipg_devsuborg_cached] b",
              "on a.devsuborg = b.devsuborg",
              "where 1=1",
              "and[drop] = 'RTL1p0' ",
              "and [reuse] in ('configurable')",
              "and [DropType] in ('Standard')",
              "and [TrendYYYYWW] <>''",
              "group by usingproducts, ipfamily",
              ") finalset",
              "left join  [v_dss_product] map on ','+finalset.[productlist] +',' like '%,' + map.name  + ',%'",
              "group by ",
              "name ",
              ",ipfamily",
              ",currentww"
            ]
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>--starting to break data for requestingproducts/usingproducts",
              "select ",
              "name as [project]",
              ",ipfamily",
              ",[currentww] ",
              ", min([EarliestRTL1p0Date]) as [EarliestRTL1p0Date] --to get the earliest date among several same project/ipfamily with different configuration",
              ",min([LatestRTL1p0Date]) as [LatestRTL1p0Date]",
              "",
              "from ",
              "( ",
              "--Find a pair of product/ipfamily for NonPIC and PIC data",
              "select ",
              "requestingproducts as [productlist]",
              ",ipfamily",
              ",'nonPIC' as [Category]",
              ", min([TrendYYYYWW]) as [EarliestRTL1p0Date]",
              ",max([TrendYYYYWW]) as [LatestRTL1p0Date]",
              ",datepart(ww, getutcdate()) as [currentww] ",
              "from [v_ipg_carbon_milestone] a",
              "join [ipg_devsuborg_cached] b",
              "on a.devsuborg = b.devsuborg",
              "WHERE 1=1",
              "and[drop] = 'RTL1p0' ",
              "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
              "and [DropType] in ('Standard')",
              "and [TrendYYYYWW] <>''",
              "group by requestingproducts, ipfamily",
              "",
              "UNION ALL",
              "",
              "select ",
              "usingproducts as [productlist]",
              ",ipfamily",
              ",'PIC' as [Category]",
              ", min([TrendYYYYWW]) as [EarliestRTL1p0Date]",
              ",max([TrendYYYYWW]) as [LatestRTL1p0Date]",
              ",datepart(ww, getutcdate()) as [currentww] ",
              "from [v_ipg_carbon_milestone] a",
              "join [ipg_devsuborg_cached] b",
              "on a.devsuborg = b.devsuborg",
              "where 1=1",
              "and[drop] = 'RTL1p0' ",
              "and [reuse] in ('configurable')",
              "and [DropType] in ('Standard')",
              "and [TrendYYYYWW] <>''",
              "group by usingproducts, ipfamily",
              ") finalset",
              "left join  [v_dss_product] map on ','+finalset.[productlist] +',' like '%,' + map.name  + ',%'",
              "group by ",
              "name ",
              ",ipfamily",
              ",currentww</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryActiveProductIP",
        "columns": [
          {
            "name": "ipfamily",
            "dataType": "string",
            "sourceColumn": "ipfamily"
          },
          {
            "name": "product",
            "dataType": "string",
            "sourceColumn": "product"
          },
          {
            "type": "calculated",
            "name": "pfkey",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[product]&\"_\"&[ipfamily]"
          }
        ],
        "partitions": [
          {
            "name": "QueryActiveProductIP",
            "source": {
              "type": "query",
              "query": [
                "select distinct ipfamily, project as product from ",
                "(",
                "/*Active configuration to map back to HSD ES Feature or Bug for Post IP3 or PostRTL1p0r report. The purpose is to check active IP, Product in Carbon for all CIG product and family */",
                "select configuration, ipfamily",
                ",active.product as [project]",
                ",'active' as [activeBOM]",
                ",'NonPIC' as IsPIC",
                ",getdate() as recent_update",
                "from [V_DSS_MILESTONE] DSS",
                "join [ipg_devsuborg_cached] devsub",
                "on DSS.devsuborg = devsub.devsuborg",
                "join (select distinct product from [cig_product_ti_cached]) active",
                "on affectedproducts like '%' + active.product + '%'",
                "WHERE 1=1",
                "--and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
                "--and [DropType] in ('Standard')",
                "--and [TrendYYYYWW] <> ''",
                "group by configuration, ipfamily, active.product",
                "",
                ") a"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct ipfamily, project as product from ",
                  "(",
                  "/*Active configuration to map back to HSD ES Feature or Bug for Post IP3 or PostRTL1p0r report. The purpose is to check active IP, Product in Carbon for all CIG product and family */",
                  "select configuration, ipfamily",
                  ",active.product as [project]",
                  ",'active' as [activeBOM]",
                  ",'NonPIC' as IsPIC",
                  ",getdate() as recent_update",
                  "from [V_DSS_MILESTONE] DSS",
                  "join [ipg_devsuborg_cached] devsub",
                  "on DSS.devsuborg = devsub.devsuborg",
                  "join (select distinct product from [cig_product_ti_cached]) active",
                  "on affectedproducts like '%' + active.product + '%'",
                  "WHERE 1=1",
                  "--and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
                  "--and [DropType] in ('Standard')",
                  "--and [TrendYYYYWW] <> ''",
                  "group by configuration, ipfamily, active.product",
                  "",
                  ") a</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct ipfamily, project as product from ",
              "(",
              "/*Active configuration to map back to HSD ES Feature or Bug for Post IP3 or PostRTL1p0r report. The purpose is to check active IP, Product in Carbon for all CIG product and family */",
              "select configuration, ipfamily",
              ",active.product as [project]",
              ",'active' as [activeBOM]",
              ",'NonPIC' as IsPIC",
              ",getdate() as recent_update",
              "from [V_DSS_MILESTONE] DSS",
              "join [ipg_devsuborg_cached] devsub",
              "on DSS.devsuborg = devsub.devsuborg",
              "join (select distinct product from [cig_product_ti_cached]) active",
              "on affectedproducts like '%' + active.product + '%'",
              "WHERE 1=1",
              "--and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
              "--and [DropType] in ('Standard')",
              "--and [TrendYYYYWW] <> ''",
              "group by configuration, ipfamily, active.product",
              "",
              ") a"
            ]
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct ipfamily, project as product from ",
              "(",
              "/*Active configuration to map back to HSD ES Feature or Bug for Post IP3 or PostRTL1p0r report. The purpose is to check active IP, Product in Carbon for all CIG product and family */",
              "select configuration, ipfamily",
              ",active.product as [project]",
              ",'active' as [activeBOM]",
              ",'NonPIC' as IsPIC",
              ",getdate() as recent_update",
              "from [V_DSS_MILESTONE] DSS",
              "join [ipg_devsuborg_cached] devsub",
              "on DSS.devsuborg = devsub.devsuborg",
              "join (select distinct product from [cig_product_ti_cached]) active",
              "on affectedproducts like '%' + active.product + '%'",
              "WHERE 1=1",
              "--and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
              "--and [DropType] in ('Standard')",
              "--and [TrendYYYYWW] <> ''",
              "group by configuration, ipfamily, active.product",
              "",
              ") a</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryLastProcessed",
        "columns": [
          {
            "name": "lastprocesseddate",
            "dataType": "dateTime",
            "sourceColumn": "lastprocesseddate",
            "formatString": "General Date"
          }
        ],
        "partitions": [
          {
            "name": "QueryLastProcessed",
            "source": {
              "type": "query",
              "query": [
                "select distinct",
                "dateadd(hour, -7, getutcdate()) as lastprocesseddate",
                "from [ipg_devsuborg_cached]"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
                  "dateadd(hour, -7, getutcdate()) as lastprocesseddate",
                  "from [ipg_devsuborg_cached]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
              "dateadd(hour, -7, getutcdate()) as lastprocesseddate",
              "from [ipg_devsuborg_cached]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          },
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct",
              "dateadd(hour, -7, getutcdate()) as lastprocesseddate",
              "from [ipg_devsuborg_cached]"
            ]
          }
        ]
      },
      {
        "name": "QueryGladius",
        "columns": [
          {
            "name": "old_family",
            "dataType": "string",
            "sourceColumn": "old_family"
          },
          {
            "name": "Family",
            "dataType": "string",
            "sourceColumn": "Family",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ip_supplier",
            "dataType": "string",
            "sourceColumn": "ip_supplier",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DevOrg",
            "dataType": "string",
            "sourceColumn": "DevOrg"
          },
          {
            "name": "SubOrg",
            "dataType": "string",
            "sourceColumn": "SubOrg"
          },
          {
            "name": "Product_Owner",
            "dataType": "string",
            "sourceColumn": "Product_Owner"
          },
          {
            "name": "Execution_Lead",
            "dataType": "string",
            "sourceColumn": "Execution_Lead"
          },
          {
            "name": "Architecture_Lead",
            "dataType": "string",
            "sourceColumn": "Architecture_Lead"
          },
          {
            "name": "IndustryDomain",
            "dataType": "string",
            "sourceColumn": "IndustryDomain"
          },
          {
            "name": "IPConfigurationID",
            "dataType": "int64",
            "sourceColumn": "IPConfigurationID"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration"
          }
        ],
        "partitions": [
          {
            "name": "QueryGladius",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct ",
                "case when old_family = 'P-UNIT' THEN 'PUNIT'",
                "when old_family = 'DC_SCF' THEN 'SCF'",
                "ELSE old_family END as old_family",
                ", [family]",
                ", ip_supplier",
                ", devsuborg as DevOrg",
                ", devsuborg as SubOrg",
                ", [Product_Owner]",
                ", [Execution_Lead]",
                ", [Architecture_Lead] ",
                ", IndustryDomain",
                ", [IPConfigurationID]",
                ", [Configuration]",
                "from [v_ipg_contacts]"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct ",
                  "case when old_family = 'P-UNIT' THEN 'PUNIT'",
                  "when old_family = 'DC_SCF' THEN 'SCF'",
                  "ELSE old_family END as old_family",
                  ", [family]",
                  ", ip_supplier",
                  ", devsuborg as DevOrg",
                  ", devsuborg as SubOrg",
                  ", [Product_Owner]",
                  ", [Execution_Lead]",
                  ", [Architecture_Lead] ",
                  ", IndustryDomain",
                  ", [IPConfigurationID]",
                  ", [Configuration]",
                  "from [v_ipg_contacts]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct ",
              "case when old_family = 'P-UNIT' THEN 'PUNIT'",
              "when old_family = 'DC_SCF' THEN 'SCF'",
              "ELSE old_family END as old_family",
              ", [family]",
              ", ip_supplier",
              ", devsuborg as DevOrg",
              ", devsuborg as SubOrg",
              ", [Product_Owner]",
              ", [Execution_Lead]",
              ", [Architecture_Lead] ",
              ", IndustryDomain",
              ", [IPConfigurationID]",
              ", [Configuration]",
              "from [v_ipg_contacts]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryGladius"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct ",
              "case when old_family = 'P-UNIT' THEN 'PUNIT'",
              "when old_family = 'DC_SCF' THEN 'SCF'",
              "ELSE old_family END as old_family",
              ", [family]",
              ", ip_supplier",
              ", devsuborg as DevOrg",
              ", devsuborg as SubOrg",
              ", [Product_Owner]",
              ", [Execution_Lead]",
              ", [Architecture_Lead] ",
              ", IndustryDomain",
              ", [IPConfigurationID]",
              ", [Configuration]",
              "from [v_ipg_contacts]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryIPGCustomers",
        "columns": [
          {
            "name": "project",
            "dataType": "string",
            "sourceColumn": "project",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SoC",
            "dataType": "string",
            "sourceColumn": "SoC"
          }
        ],
        "partitions": [
          {
            "name": "QueryIPGCustomers",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select project",
                "--, min([IPG Customers]) as [IPG Customers] ",
                ",CASE WHEN [SoC] is null or SoC = '' THEN 'N/A' else [SoC] END as [SoC]",
                "from [ipg_soc_customers_anchor] ",
                "",
                "group by ",
                "project",
                "--,[IPG Customers]",
                ",[SoC]"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select project",
                  "--, min([IPG Customers]) as [IPG Customers] ",
                  ",CASE WHEN [SoC] is null or SoC = '' THEN 'N/A' else [SoC] END as [SoC]",
                  "from [ipg_soc_customers_anchor] ",
                  "",
                  "group by ",
                  "project",
                  "--,[IPG Customers]",
                  ",[SoC]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select project",
              "--, min([IPG Customers]) as [IPG Customers] ",
              ",CASE WHEN [SoC] is null or SoC = '' THEN 'N/A' else [SoC] END as [SoC]",
              "from [ipg_soc_customers_anchor] ",
              "",
              "group by ",
              "project",
              "--,[IPG Customers]",
              ",[SoC]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryIPGCustomers"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select project",
              "--, min([IPG Customers]) as [IPG Customers] ",
              ",CASE WHEN [SoC] is null or SoC = '' THEN 'N/A' else [SoC] END as [SoC]",
              "from [ipg_soc_customers_anchor] ",
              "",
              "group by ",
              "project",
              "--,[IPG Customers]",
              ",[SoC]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "DynamicLegend",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "LegendID",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[LegendID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "LegendAttribute",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[LegendAttribute]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "LegendValue",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[LegendValue]"
          },
          {
            "type": "calculated",
            "name": "Ordering",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH([LegendValue],",
              "\"open\", 1,",
              "\"strawman\", 2,",
              "\"por-1\", 3,",
              "\"por\", 4,",
              "\"complete\", 5,",
              "\"rejected\", 6,",
              "\"future\", 7,",
              "\"rejected.merged\",8,",
              "",
              "\"1-showstopper\", 1,",
              "\"2-high\", 2,",
              "\"3-medium\", 3,",
              "\"4-low\", 4,",
              "",
              "\"New\",1,",
              "\"Exploration\",2,",
              "\"In Architecture\",3,",
              "\"In Execution\",4,",
              "\"Scheduled\",5,",
              "\"Alpha\",6,",
              "\"Beta\",7,",
              "\"In Production\", 8,",
              "\"More Info\", 9,",
              "\"Deferred\", 10,",
              "\"Abandoned\", 11, ",
              "\"Rejected \", 12,",
              "",
              "\"NoIP3-IE\", 1,",
              "\"PostIP3-IE\", 2,",
              "\"PreIP3-IE\", 3,",
              "\"NotmatchRelease/Config\", 4,",
              "",
              "\"No POPL2\", 1,",
              "\"Post POPL2\", 2,",
              "\"Pre POPL2\", 3,",
              "",
              "\"No POPL3-EC\", 1,",
              "\"Post POPL3-EC\", 2,",
              "\"Pre POPL3-EC\", 3,",
              "",
              "\"Yes\", 1,",
              "\"No\", 2,",
              "",
              "\"Concept\", 1,",
              "\"Feasibility\", 2,",
              "\"Execution\", 3,",
              "20 ",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "LegendOrdered",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "if(ISBLANK(DynamicLegend[LegendValue])",
              " || DynamicLegend[LegendValue] in {\"null\",\"~Unknown\"},BLANK(),DynamicLegend[LegendValue]",
              ")",
              ""
            ],
            "sortByColumn": "Ordering"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "UNION(",
                "SELECTCOLUMNS(QueryFeature,",
                " \"LegendID\", QueryFeature[LatestUniqueID],",
                "  \"LegendAttribute\", \"Status\",",
                "\"LegendValue\", IF(QueryFeature[status] = \"Rejected\", \"Rejected \", QueryFeature[status])",
                ")",
                ",",
                "SELECTCOLUMNS(QueryFeature,",
                " \"LegendID\", QueryFeature[LatestUniqueID],",
                "  \"LegendAttribute\", \"IP3-IE Milestone\",",
                "\"LegendValue\", QueryFeature[IP3-IE Miletone]) ",
                ",",
                "SELECTCOLUMNS(QueryFeature,",
                " \"LegendID\", QueryFeature[LatestUniqueID],",
                "  \"LegendAttribute\", \"HSDES Status\",",
                "\"LegendValue\", QueryFeature[HSDES Status]) ",
                ",",
                "SELECTCOLUMNS(QueryFeature,",
                " \"LegendID\", QueryFeature[LatestUniqueID],",
                "  \"LegendAttribute\", \"POPL2 Milestone\",",
                "\"LegendValue\", QueryFeature[POPL2 Milestone]) ",
                ",",
                "SELECTCOLUMNS(QueryFeature,",
                " \"LegendID\", QueryFeature[LatestUniqueID],",
                "  \"LegendAttribute\", \"POPL3-EC Milestone\",",
                "\"LegendValue\", QueryFeature[POPL3-EC Milestone]) ",
                ",",
                "SELECTCOLUMNS(QueryFeature,",
                " \"LegendID\", QueryFeature[LatestUniqueID],",
                "  \"LegendAttribute\", \"Priority\",",
                "\"LegendValue\", QueryFeature[priority])",
                ",",
                "SELECTCOLUMNS(QueryFeature,",
                " \"LegendID\", QueryFeature[LatestUniqueID],",
                "  \"LegendAttribute\", \"SDL_Required\",",
                "\"LegendValue\", QueryFeature[sdl_required])  ",
                ",",
                "SELECTCOLUMNS(QueryFeature,",
                " \"LegendID\", QueryFeature[LatestUniqueID],",
                "  \"LegendAttribute\", \"Stage Found\",",
                "\"LegendValue\", QueryFeature[stage_found])  ",
                ",",
                "SELECTCOLUMNS(QueryFeature,",
                " \"LegendID\", QueryFeature[LatestUniqueID],",
                "  \"LegendAttribute\", \"siip_category\",",
                "\"LegendValue\", QueryFeature[siip_category])  ",
                ")"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "SelectDynamicLegend",
            "expression": "SELECTEDVALUE(DynamicLegend[LegendAttribute])"
          }
        ]
      },
      {
        "name": "DynamicAxis",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "AxisID",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[AxisID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "AxisAttribute",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[AxisAttribute]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "AxisValue",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[AxisValue]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "UNION(",
                "SELECTCOLUMNS(QueryFeature,",
                " \"AxisID\", QueryFeature[LatestUniqueID],",
                "  \"AxisAttribute\", \"SoC Die\",",
                "\"AxisValue\", QueryFeature[SoC Die]) ",
                ",",
                "SELECTCOLUMNS(QueryFeature,",
                " \"AxisID\", QueryFeature[LatestUniqueID],",
                "  \"AxisAttribute\", \"IPSupplier\",",
                "\"AxisValue\", QueryFeature[IPSupplier]) ",
                ",",
                "SELECTCOLUMNS(QueryFeature,",
                " \"AxisID\", QueryFeature[LatestUniqueID],",
                "  \"AxisAttribute\", \"IPFamily\",",
                "\"AxisValue\", QueryFeature[IPFamily]) ",
                ",",
                "SELECTCOLUMNS(QueryFeature,",
                " \"AxisID\", QueryFeature[LatestUniqueID],",
                "  \"AxisAttribute\", \"SubOrg\",",
                "\"AxisValue\", QueryFeature[SubOrg]) ",
                ",",
                "SELECTCOLUMNS(QueryFeature,",
                " \"AxisID\", QueryFeature[LatestUniqueID],",
                "  \"AxisAttribute\", \"Status\",",
                "\"AxisValue\", QueryFeature[Status]) ",
                ",",
                "SELECTCOLUMNS(QueryFeature,",
                " \"AxisID\", QueryFeature[LatestUniqueID],",
                "  \"AxisAttribute\", \"Stage Found\",",
                "\"AxisValue\", QueryFeature[stage_found]) ",
                ",",
                "SELECTCOLUMNS(QueryFeature,",
                " \"AxisID\", QueryFeature[LatestUniqueID],",
                "  \"AxisAttribute\", \"Industry Domain\",",
                "\"AxisValue\", QueryFeature[IndustryDomain]) ",
                "",
                ")",
                ""
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "AxisSelectedValue",
            "expression": "SELECTEDVALUE(DynamicAxis[AxisAttribute])"
          }
        ]
      },
      {
        "name": "QueryGeneration",
        "columns": [
          {
            "name": "name",
            "dataType": "string",
            "sourceColumn": "name",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ipgeneration",
            "dataType": "string",
            "sourceColumn": "ipgeneration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ipconfigurationid",
            "dataType": "int64",
            "sourceColumn": "ipconfigurationid"
          }
        ],
        "partitions": [
          {
            "name": "QueryGeneration",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select distinct name, ipconfigurationid, ipgeneration from v_ipg_carbon_ipconfiguration where name is not null and name <> ''",
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct name, ipconfigurationid, ipgeneration from v_ipg_carbon_ipconfiguration where name is not null and name <> ''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select distinct name, ipconfigurationid, ipgeneration from v_ipg_carbon_ipconfiguration where name is not null and name <> ''"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryGeneration"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct name, ipconfigurationid, ipgeneration from v_ipg_carbon_ipconfiguration where name is not null and name <> ''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "QueryMilestone",
        "columns": [
          {
            "name": "milestoneid",
            "dataType": "int64",
            "sourceColumn": "milestoneid",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "drop",
            "dataType": "string",
            "sourceColumn": "drop",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "trendYYYYWW",
            "dataType": "int64",
            "sourceColumn": "trendYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "PORYYYYWW",
            "dataType": "int64",
            "sourceColumn": "PORYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "complete",
            "dataType": "string",
            "sourceColumn": "complete"
          },
          {
            "name": "existing_milestone",
            "dataType": "string",
            "sourceColumn": "existing_milestone"
          },
          {
            "name": "is_execution_drop",
            "dataType": "int64",
            "sourceColumn": "is_execution_drop"
          },
          {
            "name": "is_execution_milestone",
            "dataType": "string",
            "sourceColumn": "is_execution_milestone"
          }
        ],
        "partitions": [
          {
            "name": "QueryMilestone",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct milestoneid",
                ", drop",
                ", complete",
                ", trendYYYYWW",
                ", PORYYYYWW",
                ", 'yes' as existing_milestone ",
                ",CASE WHEN[Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
                "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
                "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
                "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%' THEN 1 ELSE 0 END as [is_execution_drop]",
                ",CASE WHEN[Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
                "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
                "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
                "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%' THEN 'yes' ELSE 'no' END as [is_execution_milestone]",
                "from v_ipg_carbon_milestone where devorg = 'IPG'"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct milestoneid",
                  ", drop",
                  ", complete",
                  ", trendYYYYWW",
                  ", PORYYYYWW",
                  ", 'yes' as existing_milestone ",
                  ",CASE WHEN[Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
                  "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
                  "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
                  "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%' THEN 1 ELSE 0 END as [is_execution_drop]",
                  ",CASE WHEN[Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
                  "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
                  "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
                  "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%' THEN 'yes' ELSE 'no' END as [is_execution_milestone]",
                  "from v_ipg_carbon_milestone where devorg = 'IPG'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct milestoneid",
              ", drop",
              ", complete",
              ", trendYYYYWW",
              ", PORYYYYWW",
              ", 'yes' as existing_milestone ",
              ",CASE WHEN[Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
              "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%' THEN 1 ELSE 0 END as [is_execution_drop]",
              ",CASE WHEN[Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
              "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%' THEN 'yes' ELSE 'no' END as [is_execution_milestone]",
              "from v_ipg_carbon_milestone where devorg = 'IPG'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryMilestone"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct milestoneid",
              ", drop",
              ", complete",
              ", trendYYYYWW",
              ", PORYYYYWW",
              ", 'yes' as existing_milestone ",
              ",CASE WHEN[Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
              "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%' THEN 1 ELSE 0 END as [is_execution_drop]",
              ",CASE WHEN[Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
              "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%' THEN 'yes' ELSE 'no' END as [is_execution_milestone]",
              "from v_ipg_carbon_milestone where devorg = 'IPG'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "DyanmicFeatureCalendar",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Category",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Category]",
            "sortByColumn": "CategoryOrder"
          },
          {
            "type": "calculatedTableColumn",
            "name": "CategoryOrder",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[CategoryOrder]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Intel_Month_Name",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Intel_Month_Name]",
            "sortByColumn": "Intel_Month_NBR"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Intel_Month_NBR",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Intel_Month_NBR]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Quarter",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Quarter]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Year",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Year]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "WW",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[WW]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ID",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[ID]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "",
                "VAR currentww = MAX(QueryFeature[currentww])",
                "VAR prevWW  = currentww - 1",
                "",
                "/* snapshot 52 ww until now */",
                "VAR _minus_52 = currentww - 52",
                "VAR _52_WW = IF(",
                "    value(RIGHT(_minus_52,2)) > 52,",
                "    _minus_52 - 48, _minus_52)    /* minus 42 because from 100 */",
                "",
                "/* snapshot of 13 ww until now*/",
                "VAR _minus_13 = currentww - 13",
                "VAR _13_WW = IF(",
                "    VALUE(RIGHT(_minus_13, 2)) > 52,",
                "    _minus_13 - 48, _minus_13)",
                "",
                "/*snapshot of 4 ww until now*/",
                "VAR _minus_4 = currentww - 4",
                "VAR _4_WW = IF(",
                "    VALUE(RIGHT(_minus_4,2 )) > 52,",
                "    _minus_4 - 48, _minus_4)",
                "",
                "",
                "/*Calculated fact table */",
                "RETURN ",
                "        UNION(",
                "        SELECTCOLUMNS(QueryFeature,",
                "        \"Category\", \"All\",",
                "        \"CategoryOrder\", 5,",
                "        \"WW\", QueryFeature[ww_submitted_date],",
                "        \"Intel_Month_Name\", QueryFeature[Intel Month],",
                "        \"Intel_Month_NBR\", QueryFeature[IntelMonthNbr],",
                "        \"Quarter\", RIGHT(QueryFeature[SubmittedYear_Quarter],2),",
                "         \"Year\", QueryFeature[SubmittedYear]",
                "         , \"ID\", QueryFeature[LatestUniqueID]",
                ")",
                ",",
                "         SELECTCOLUMNS(FILTER(QueryFeature,QueryFeature[ww_submitted_date] > _52_WW),",
                "        \"Category\", \"Last 52 WWs\",",
                "        \"CategoryOrder\", 4,",
                "        \"WW\", QueryFeature[ww_submitted_date],",
                "        \"Intel_Month_Name\", QueryFeature[Intel Month],",
                "        \"Intel_Month_NBR\", QueryFeature[IntelMonthNbr],",
                "        \"Quarter\", RIGHT(QueryFeature[SubmittedYear_Quarter],2),",
                "         \"Year\", QueryFeature[SubmittedYear]",
                "         , \"ID\", QueryFeature[LatestUniqueID])",
                ",",
                "             SELECTCOLUMNS(FILTER(QueryFeature,QueryFeature[ww_submitted_date] > _13_WW),",
                "        \"Category\", \"Last 13 WWs\",",
                "        \"CategoryOrder\", 3,",
                "        \"WW\", QueryFeature[ww_submitted_date],",
                "        \"Intel_Month_Name\", QueryFeature[Intel Month],",
                "        \"Intel_Month_NBR\", QueryFeature[IntelMonthNbr],",
                "        \"Quarter\", RIGHT(QueryFeature[SubmittedYear_Quarter],2),",
                "         \"Year\", QueryFeature[SubmittedYear]",
                "        , \"ID\", QueryFeature[LatestUniqueID]",
                ")",
                ",",
                "        SELECTCOLUMNS(FILTER(QueryFeature,QueryFeature[ww_submitted_date] > _4_WW),",
                "        \"Category\", \"Last 4 WWs\",",
                "        \"CategoryOrder\", 2,",
                "        \"WW\", QueryFeature[ww_submitted_date],",
                "        \"Intel_Month_Name\", QueryFeature[Intel Month],",
                "        \"Intel_Month_NBR\", QueryFeature[IntelMonthNbr],",
                "        \"Quarter\", RIGHT(QueryFeature[SubmittedYear_Quarter],2),",
                "         \"Year\", QueryFeature[SubmittedYear]",
                "   , \"ID\", QueryFeature[LatestUniqueID])",
                ",",
                "        SELECTCOLUMNS(FILTER(QueryFeature,QueryFeature[ww_submitted_date] > prevWW),",
                "        \"Category\", \"Last 1 WW\",",
                "        \"CategoryOrder\", 1,",
                "        \"WW\", QueryFeature[ww_submitted_date],",
                "        \"Intel_Month_Name\", QueryFeature[Intel Month],",
                "        \"Intel_Month_NBR\", QueryFeature[IntelMonthNbr],",
                "        \"Quarter\", RIGHT(QueryFeature[SubmittedYear_Quarter],2),",
                "         \"Year\", QueryFeature[SubmittedYear]   , ",
                "            \"ID\", QueryFeature[LatestUniqueID]))"
              ]
            }
          }
        ]
      },
      {
        "name": "QuerySubOrg",
        "columns": [
          {
            "name": "family",
            "dataType": "string",
            "sourceColumn": "family",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "devsuborg",
            "dataType": "string",
            "sourceColumn": "devsuborg",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ip_supplier",
            "dataType": "string",
            "sourceColumn": "ip_supplier",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "QuerySubOrg",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select distinct family, devsuborg, ip_supplier from v_ipg_contacts",
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct family, devsuborg, ip_supplier from v_ipg_contacts</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select distinct family, devsuborg, ip_supplier from v_ipg_contacts"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QuerySubOrg"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct family, devsuborg, ip_supplier from v_ipg_contacts</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "QueryGladiusWrongData",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "old_family",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[old_family]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Family",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[Family]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ip_supplier",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[ip_supplier]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "DevOrg",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[DevOrg]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "SubOrg",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[SubOrg]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Product_Owner",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[Product_Owner]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Execution_Lead",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[Execution_Lead]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Architecture_Lead",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[Architecture_Lead]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "IndustryDomain",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[IndustryDomain]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "IPConfigurationID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[IPConfigurationID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Configuration",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[Configuration]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                " UNION(",
                "\t\tFILTER(",
                "\t\t\tQueryGladius",
                "\t\t\t,QueryGladius[Family] = \"DISP IO\"",
                "\t\t\t&& QueryGladius[SubOrg] = \"IPG NR\"",
                "\t\t),",
                "\t\tFILTER(",
                "\t\t\tQueryGladius",
                "\t\t\t,QueryGladius[Family] = \"IOSF PSF\"",
                "\t\t\t&& QueryGladius[SubOrg] = \"IPG NR\"",
                "\t\t),",
                "\t\tFILTER(",
                "\t\t\tQueryGladius",
                "\t\t\t,QueryGladius[Family] = \"ISCLK\"",
                "\t\t\t&& QueryGladius[SubOrg] = \"IPG NR\"",
                "\t\t),",
                "\t\tFILTER(",
                "\t\t\tQueryGladius",
                "\t\t\t,QueryGladius[Family] = \"USB2 PHY\"",
                "\t\t\t&& QueryGladius[SubOrg] = \"IPG NR\"",
                "\t\t\t&& QueryGladius[ip_supplier] = \"Die to Die IP\"",
                "\t\t)",
                ")",
                "\t\t\t\t",
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "QueryGladiusTempData",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "old_family",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[old_family]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Family",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[Family]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ip_supplier",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[ip_supplier]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "DevOrg",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[DevOrg]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "SubOrg",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[SubOrg]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Product_Owner",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[Product_Owner]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Execution_Lead",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[Execution_Lead]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Architecture_Lead",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[Architecture_Lead]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "IndustryDomain",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[IndustryDomain]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "IPConfigurationID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[IPConfigurationID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Configuration",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryGladius[Configuration]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": " EXCEPT(QueryGladius, QueryGladiusWrongData)"
            }
          }
        ]
      },
      {
        "name": "QueryPOPL2",
        "columns": [
          {
            "name": "project",
            "dataType": "string",
            "sourceColumn": "project",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendYYYYWW",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "QueryPOPL2",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "SELECT  ",
                " project ",
                ", max(datepart(ww,trend)) AS TrendYYYYWW",
                "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                "WHERE milestone IN ( 'POPL2' )",
                "AND trend is not null ",
                "AND trend <> '' ",
                "AND ([Planning State] not like '%Cancelled%'",
                " AND [Planning State] not like '%Completed%' ",
                "AND [Planning State] not like '%Delete%' ",
                "AND [Planning State] not like '%Abandoned%')  ",
                "AND project <> 'Red Dragon'",
                "group by project, trend"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>SELECT  ",
                  " project ",
                  ", max(datepart(ww,trend)) AS TrendYYYYWW",
                  "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                  "WHERE milestone IN ( 'POPL2' )",
                  "AND trend is not null ",
                  "AND trend <> '' ",
                  "AND ([Planning State] not like '%Cancelled%'",
                  " AND [Planning State] not like '%Completed%' ",
                  "AND [Planning State] not like '%Delete%' ",
                  "AND [Planning State] not like '%Abandoned%')  ",
                  "AND project <> 'Red Dragon'",
                  "group by project, trend</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "SELECT  ",
              " project ",
              ", max(datepart(ww,trend)) AS TrendYYYYWW",
              "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "WHERE milestone IN ( 'POPL2' )",
              "AND trend is not null ",
              "AND trend <> '' ",
              "AND ([Planning State] not like '%Cancelled%'",
              " AND [Planning State] not like '%Completed%' ",
              "AND [Planning State] not like '%Delete%' ",
              "AND [Planning State] not like '%Abandoned%')  ",
              "AND project <> 'Red Dragon'",
              "group by project, trend"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryPOPL2"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>SELECT  ",
              " project ",
              ", max(datepart(ww,trend)) AS TrendYYYYWW",
              "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "WHERE milestone IN ( 'POPL2' )",
              "AND trend is not null ",
              "AND trend <> '' ",
              "AND ([Planning State] not like '%Cancelled%'",
              " AND [Planning State] not like '%Completed%' ",
              "AND [Planning State] not like '%Delete%' ",
              "AND [Planning State] not like '%Abandoned%')  ",
              "AND project <> 'Red Dragon'",
              "group by project, trend</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryPOPL3-EC",
        "columns": [
          {
            "name": "project",
            "dataType": "string",
            "sourceColumn": "project",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendYYYYWW",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "QueryPOPL3",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "SELECT",
                "main.project",
                ",isnull(POPL3Date,ECDate) AS [TrendYYYYWW]",
                "FROM",
                "(",
                "SELECT distinct project",
                "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                "WHERE 1=1",
                "AND ([Planning State] not like '%Cancelled%' AND [Planning State] not like '%Completed%' AND [Planning State] not like '%Delete%' AND [Planning State] not like '%Abandoned%')",
                "AND trend is not null",
                "AND trend <> ''",
                "--AND project like '%die'",
                ")main",
                "",
                " ",
                "",
                "LEFT JOIN (",
                "",
                " ",
                "",
                "SELECT",
                "project",
                ",MAX(datepart(ww,trend)) AS [POPL3Date]",
                "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                "WHERE 1=1",
                "AND milestone = 'POPL3'",
                "AND ([Planning State] not like '%Cancelled%' AND [Planning State] not like '%Completed%' AND [Planning State] not like '%Delete%' AND [Planning State] not like '%Abandoned%')",
                "AND trend is not null",
                "AND trend <> ''",
                "--AND project like '%die'",
                "GROUP BY project",
                ")POPL3Date",
                "",
                " ",
                "",
                "ON main.project = POPL3Date.project",
                "",
                " ",
                "",
                "LEFT JOIN (",
                "SELECT",
                "project",
                ",MAX(datepart(ww,trend)) AS [ECDate]",
                "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                "WHERE 1=1",
                "AND milestone = 'EC'",
                "AND ([Planning State] not like '%Cancelled%' AND [Planning State] not like '%Completed%' AND [Planning State] not like '%Delete%' AND [Planning State] not like '%Abandoned%')",
                "AND trend is not null",
                "AND trend <> ''",
                "--AND project like '%die'",
                "GROUP BY project",
                ") ECdrop",
                "",
                " ",
                "",
                "ON main.project = ECdrop.project",
                "WHERE [TrendYYYYWW] is not null",
                "AND [TrendYYYYWW] <> ''"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>SELECT",
                  "main.project",
                  ",isnull(POPL3Date,ECDate) AS [TrendYYYYWW]",
                  "FROM",
                  "(",
                  "SELECT distinct project",
                  "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                  "WHERE 1=1",
                  "AND ([Planning State] not like '%Cancelled%' AND [Planning State] not like '%Completed%' AND [Planning State] not like '%Delete%' AND [Planning State] not like '%Abandoned%')",
                  "AND trend is not null",
                  "AND trend <> ''",
                  "--AND project like '%die'",
                  ")main",
                  "",
                  " ",
                  "",
                  "LEFT JOIN (",
                  "",
                  " ",
                  "",
                  "SELECT",
                  "project",
                  ",MAX(datepart(ww,trend)) AS [POPL3Date]",
                  "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                  "WHERE 1=1",
                  "AND milestone = 'POPL3'",
                  "AND ([Planning State] not like '%Cancelled%' AND [Planning State] not like '%Completed%' AND [Planning State] not like '%Delete%' AND [Planning State] not like '%Abandoned%')",
                  "AND trend is not null",
                  "AND trend <> ''",
                  "--AND project like '%die'",
                  "GROUP BY project",
                  ")POPL3Date",
                  "",
                  " ",
                  "",
                  "ON main.project = POPL3Date.project",
                  "",
                  " ",
                  "",
                  "LEFT JOIN (",
                  "SELECT",
                  "project",
                  ",MAX(datepart(ww,trend)) AS [ECDate]",
                  "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                  "WHERE 1=1",
                  "AND milestone = 'EC'",
                  "AND ([Planning State] not like '%Cancelled%' AND [Planning State] not like '%Completed%' AND [Planning State] not like '%Delete%' AND [Planning State] not like '%Abandoned%')",
                  "AND trend is not null",
                  "AND trend <> ''",
                  "--AND project like '%die'",
                  "GROUP BY project",
                  ") ECdrop",
                  "",
                  " ",
                  "",
                  "ON main.project = ECdrop.project",
                  "WHERE [TrendYYYYWW] is not null",
                  "AND [TrendYYYYWW] <> ''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "SELECT",
              "main.project",
              ",isnull(POPL3Date,ECDate) AS [TrendYYYYWW]",
              "FROM",
              "(",
              "SELECT distinct project",
              "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "WHERE 1=1",
              "AND ([Planning State] not like '%Cancelled%' AND [Planning State] not like '%Completed%' AND [Planning State] not like '%Delete%' AND [Planning State] not like '%Abandoned%')",
              "AND trend is not null",
              "AND trend <> ''",
              "--AND project like '%die'",
              ")main",
              "",
              " ",
              "",
              "LEFT JOIN (",
              "",
              " ",
              "",
              "SELECT",
              "project",
              ",MAX(datepart(ww,trend)) AS [POPL3Date]",
              "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "WHERE 1=1",
              "AND milestone = 'POPL3'",
              "AND ([Planning State] not like '%Cancelled%' AND [Planning State] not like '%Completed%' AND [Planning State] not like '%Delete%' AND [Planning State] not like '%Abandoned%')",
              "AND trend is not null",
              "AND trend <> ''",
              "--AND project like '%die'",
              "GROUP BY project",
              ")POPL3Date",
              "",
              " ",
              "",
              "ON main.project = POPL3Date.project",
              "",
              " ",
              "",
              "LEFT JOIN (",
              "SELECT",
              "project",
              ",MAX(datepart(ww,trend)) AS [ECDate]",
              "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "WHERE 1=1",
              "AND milestone = 'EC'",
              "AND ([Planning State] not like '%Cancelled%' AND [Planning State] not like '%Completed%' AND [Planning State] not like '%Delete%' AND [Planning State] not like '%Abandoned%')",
              "AND trend is not null",
              "AND trend <> ''",
              "--AND project like '%die'",
              "GROUP BY project",
              ") ECdrop",
              "",
              " ",
              "",
              "ON main.project = ECdrop.project",
              "WHERE [TrendYYYYWW] is not null",
              "AND [TrendYYYYWW] <> ''"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryPOPL3"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>SELECT",
              "main.project",
              ",isnull(POPL3Date,ECDate) AS [TrendYYYYWW]",
              "FROM",
              "(",
              "SELECT distinct project",
              "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "WHERE 1=1",
              "AND ([Planning State] not like '%Cancelled%' AND [Planning State] not like '%Completed%' AND [Planning State] not like '%Delete%' AND [Planning State] not like '%Abandoned%')",
              "AND trend is not null",
              "AND trend <> ''",
              "--AND project like '%die'",
              ")main",
              "",
              " ",
              "",
              "LEFT JOIN (",
              "",
              " ",
              "",
              "SELECT",
              "project",
              ",MAX(datepart(ww,trend)) AS [POPL3Date]",
              "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "WHERE 1=1",
              "AND milestone = 'POPL3'",
              "AND ([Planning State] not like '%Cancelled%' AND [Planning State] not like '%Completed%' AND [Planning State] not like '%Delete%' AND [Planning State] not like '%Abandoned%')",
              "AND trend is not null",
              "AND trend <> ''",
              "--AND project like '%die'",
              "GROUP BY project",
              ")POPL3Date",
              "",
              " ",
              "",
              "ON main.project = POPL3Date.project",
              "",
              " ",
              "",
              "LEFT JOIN (",
              "SELECT",
              "project",
              ",MAX(datepart(ww,trend)) AS [ECDate]",
              "FROM [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "WHERE 1=1",
              "AND milestone = 'EC'",
              "AND ([Planning State] not like '%Cancelled%' AND [Planning State] not like '%Completed%' AND [Planning State] not like '%Delete%' AND [Planning State] not like '%Abandoned%')",
              "AND trend is not null",
              "AND trend <> ''",
              "--AND project like '%die'",
              "GROUP BY project",
              ") ECdrop",
              "",
              " ",
              "",
              "ON main.project = ECdrop.project",
              "WHERE [TrendYYYYWW] is not null",
              "AND [TrendYYYYWW] <> ''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryJiraOwner",
        "columns": [
          {
            "name": "Status",
            "dataType": "string",
            "sourceColumn": "Status",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Phase",
            "dataType": "string",
            "sourceColumn": "Phase",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Owner",
            "dataType": "string",
            "sourceColumn": "Owner",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Comment",
            "dataType": "string",
            "sourceColumn": "Comment",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ibi_updated_date",
            "dataType": "dateTime",
            "sourceColumn": "ibi_updated_date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "ranking",
            "dataType": "string",
            "sourceColumn": "ranking"
          },
          {
            "type": "calculated",
            "name": "Sorting",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "QueryJiraOwner[ranking]"
          }
        ],
        "partitions": [
          {
            "name": "QueryJiraOwner",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select * from ipg_jira_owners",
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from ipg_jira_owners</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select * from ipg_jira_owners"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryJiraOwner"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from ipg_jira_owners</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "QueryWorkerPublic",
        "columns": [
          {
            "name": "LastName",
            "dataType": "string",
            "sourceColumn": "LastName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "FirstName",
            "dataType": "string",
            "sourceColumn": "FirstName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "upperIDSID",
            "dataType": "string",
            "sourceColumn": "upperIDSID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "WWID",
            "dataType": "string",
            "sourceColumn": "WWID"
          }
        ],
        "partitions": [
          {
            "name": "QueryWorkerPublic",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select [LastName], [FirstName],[upperIDSID], WWID from [WORKER_PUBLIC_IPG_CACHED]",
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select [LastName], [FirstName],[upperIDSID], WWID from [WORKER_PUBLIC_IPG_CACHED]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select [LastName], [FirstName],[upperIDSID], WWID from [WORKER_PUBLIC_IPG_CACHED]"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryWorkerPublic"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select [LastName], [FirstName],[upperIDSID], WWID from [WORKER_PUBLIC_IPG_CACHED]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "QueryIEMilestone",
        "columns": [
          {
            "name": "trendyyyyww",
            "dataType": "string",
            "sourceColumn": "trendyyyyww",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "configuration",
            "dataType": "string",
            "sourceColumn": "configuration"
          },
          {
            "name": "name",
            "dataType": "string",
            "sourceColumn": "name"
          },
          {
            "type": "calculated",
            "name": "UniqueKey",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[name]&\"_\"&[configuration]"
          }
        ],
        "partitions": [
          {
            "name": "QueryIEMilestone",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct configuration, map.name, trendyyyyww",
                "from",
                "(",
                "select distinct configuration, usingproducts, isnull(trenddateyyyyww, pordateyyyyww) as trendyyyyww",
                "from v_ipg_carbon_milestone_history",
                "where 1=1",
                "and [snapshot_ww] = datepart(ww, getutcdate())",
                "and devorg = 'ipg' ",
                "and complete = 'yes' ",
                "and drop = 'IP Execution Commit (IE)'",
                "",
                ") a",
                "JOIN (SELECT  distinct name FROM  v_ipg_carbon_product) as map ON ','+ a.[usingproducts] +',' LIKE '%,' +map.name+ ',%'",
                "WHERE 1=1 AND map.name IS NOT NULL",
                "and trendyyyyww is not null and trendyyyyww <> ''"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct configuration, map.name, trendyyyyww",
                  "from",
                  "(",
                  "select distinct configuration, usingproducts, isnull(trenddateyyyyww, pordateyyyyww) as trendyyyyww",
                  "from v_ipg_carbon_milestone_history",
                  "where 1=1",
                  "and [snapshot_ww] = datepart(ww, getutcdate())",
                  "and devorg = 'ipg' ",
                  "and complete = 'yes' ",
                  "and drop = 'IP Execution Commit (IE)'",
                  "",
                  ") a",
                  "JOIN (SELECT  distinct name FROM  v_ipg_carbon_product) as map ON ','+ a.[usingproducts] +',' LIKE '%,' +map.name+ ',%'",
                  "WHERE 1=1 AND map.name IS NOT NULL",
                  "and trendyyyyww is not null and trendyyyyww <> ''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct configuration, map.name, trendyyyyww",
              "from",
              "(",
              "select distinct configuration, usingproducts, isnull(trenddateyyyyww, pordateyyyyww) as trendyyyyww",
              "from v_ipg_carbon_milestone_history",
              "where 1=1",
              "and [snapshot_ww] = datepart(ww, getutcdate())",
              "and devorg = 'ipg' ",
              "and complete = 'yes' ",
              "and drop = 'IP Execution Commit (IE)'",
              "",
              ") a",
              "JOIN (SELECT  distinct name FROM  v_ipg_carbon_product) as map ON ','+ a.[usingproducts] +',' LIKE '%,' +map.name+ ',%'",
              "WHERE 1=1 AND map.name IS NOT NULL",
              "and trendyyyyww is not null and trendyyyyww <> ''"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryIEMilestone"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct configuration, map.name, trendyyyyww",
              "from",
              "(",
              "select distinct configuration, usingproducts, isnull(trenddateyyyyww, pordateyyyyww) as trendyyyyww",
              "from v_ipg_carbon_milestone_history",
              "where 1=1",
              "and [snapshot_ww] = datepart(ww, getutcdate())",
              "and devorg = 'ipg' ",
              "and complete = 'yes' ",
              "and drop = 'IP Execution Commit (IE)'",
              "",
              ") a",
              "JOIN (SELECT  distinct name FROM  v_ipg_carbon_product) as map ON ','+ a.[usingproducts] +',' LIKE '%,' +map.name+ ',%'",
              "WHERE 1=1 AND map.name IS NOT NULL",
              "and trendyyyyww is not null and trendyyyyww <> ''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryCarbonMilestoneHistory",
        "columns": [
          {
            "name": "snapshot_ww",
            "dataType": "int64",
            "sourceColumn": "snapshot_ww",
            "sourceProviderType": "Integer"
          },
          {
            "name": "milestoneid",
            "dataType": "int64",
            "sourceColumn": "milestoneid",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "drop",
            "dataType": "string",
            "sourceColumn": "drop",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "pordateyyyyww",
            "dataType": "string",
            "sourceColumn": "pordateyyyyww",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "UniqueKey",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[snapshot_ww]&\"_\"&[milestoneid]"
          }
        ],
        "partitions": [
          {
            "name": "QueryCarbonMilestoneHistory",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct  [snapshot_ww], milestoneid, drop,  pordateyyyyww",
                "from v_ipg_carbon_milestone_history",
                "where 1=1",
                "and devorg = 'ipg' ",
                "and pordateyyyyww is not null and pordateyyyyww <> ''",
                "and  [snapshot_ww]>='202011'"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  [snapshot_ww], milestoneid, drop,  pordateyyyyww",
                  "from v_ipg_carbon_milestone_history",
                  "where 1=1",
                  "and devorg = 'ipg' ",
                  "and pordateyyyyww is not null and pordateyyyyww <> ''",
                  "and  [snapshot_ww]>='202011'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct  [snapshot_ww], milestoneid, drop,  pordateyyyyww",
              "from v_ipg_carbon_milestone_history",
              "where 1=1",
              "and devorg = 'ipg' ",
              "and pordateyyyyww is not null and pordateyyyyww <> ''",
              "and  [snapshot_ww]>='202011'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryCarbonMilestoneHistory"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  [snapshot_ww], milestoneid, drop,  pordateyyyyww",
              "from v_ipg_carbon_milestone_history",
              "where 1=1",
              "and devorg = 'ipg' ",
              "and pordateyyyyww is not null and pordateyyyyww <> ''",
              "and  [snapshot_ww]>='202011'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryIP3IEDrop",
        "columns": [
          {
            "name": "configuration",
            "dataType": "string",
            "sourceColumn": "configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "product",
            "dataType": "string",
            "sourceColumn": "product",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "trenddate",
            "dataType": "int64",
            "sourceColumn": "trenddate",
            "sourceProviderType": "Integer"
          },
          {
            "type": "calculated",
            "name": "Uniquekey",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[product]&\"_\"&[configuration]"
          }
        ],
        "partitions": [
          {
            "name": "QueryIP3IEDrop",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "/*-------------------------------------------------------------------------------------------------------------",
                "1. Look up IP3 date for old config - if no trendyyyyyww then use poryyyyyww",
                "2. Look up IE Commit date for current and future config - if no trendyyyyyww then use poryyyyyww",
                "3. Use IE commit date first for any config. If doesn't exist then use IP3 date",
                "4. For IE Commit, look up usingproducts to align with contract data",
                "5. For IP3, look at requestingproducts for non-pic and usingproducts for PIC",
                "6. Break data to get a pair and map it to feature data.",
                "---------------------------------------------------------------------------------------------------------------*/",
                "SELECT distinct ipg.configuration",
                ",null as product",
                ",isnull(IP3Date,IEdate) AS trenddate",
                "FROM ",
                "(SELECT configuration",
                ",ipconfigurationid",
                ",reuse",
                "FROM [V_IPG_CARBON_MILESTONE] a",
                "WHERE 1=1",
                "AND devorg = 'IPG'",
                "AND complete = 'yes'",
                "--AND [DropType] IN ('Standard') --Remove this condition per Punit/Kristine's request on 10/29/21",
                "and drop in ('IP3', 'IP Execution Commit (IE)')",
                "and reuse <> 'configurable'",
                ")IPG",
                "/*IE Drop*/",
                "LEFT JOIN ",
                "(SELECT configuration",
                ",ipconfigurationid",
                ",'IEdrop' as Flag",
                ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IEDate",
                "FROM [V_IPG_CARBON_MILESTONE] a",
                "WHERE 1=1",
                "AND devorg = 'IPG' and[drop] ='IP Execution Commit (IE)'",
                "AND complete = 'yes'",
                "--AND [DropType] IN ('Standard')",
                "and usingproducts is not null and usingproducts <> ''",
                "and reuse <> 'configurable'",
                "GROUP BY configuration",
                ",ipconfigurationid",
                ")IE",
                "ON IPG.ipconfigurationid = IE.ipconfigurationid/* IP3 drop*/",
                "LEFT JOIN ",
                "(SELECT configuration",
                ",ipconfigurationid",
                ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IP3Date",
                "FROM [V_IPG_CARBON_MILESTONE] a",
                "WHERE 1=1",
                "AND devorg = 'IPG' and[drop] IN ('IP3')",
                "AND complete = 'yes'",
                "and reuse <> 'configurable'",
                "--AND [DropType] IN ('Standard')",
                "GROUP BY configuration",
                ",ipconfigurationid",
                ")IP3",
                "ON IPG.ipconfigurationid = IP3.ipconfigurationid",
                "WHERE trenddate is not null",
                "AND trenddate <> ''",
                "",
                "UNION ALL",
                "",
                "/*this data is for configurable config IE date information*/",
                "select configuration",
                ",map.name as product",
                ",min(trenddate) as trenddate",
                "from",
                "(",
                "SELECT ipg.configuration",
                ", reuse",
                ",CASE WHEN IE.Flag = 'IEdrop' THEN IE.usingproducts",
                "WHEN reuse = 'configurable' THEN ipg.usingproducts",
                "ELSE ipg.usingproducts END as product",
                ",isnull(IP3Date,IEdate) AS trenddate",
                "FROM (SELECT configuration",
                ",ipconfigurationid",
                ",reuse",
                ",usingproducts",
                "FROM [V_IPG_CARBON_MILESTONE] a",
                "WHERE 1=1",
                "AND devorg = 'IPG'",
                "AND complete = 'yes'",
                "--AND [DropType] IN ('Standard') --Remove this condition per Punit/Kristine's request on 10/29/21",
                "and drop in ('IP3', 'IP Execution Commit (IE)')",
                "and reuse = 'configurable'",
                ")IPG",
                "/*IE Drop*/",
                "LEFT JOIN ",
                "(SELECT configuration",
                ",ipconfigurationid",
                ",usingproducts",
                ",'IEdrop' as Flag",
                ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IEDate",
                "FROM [V_IPG_CARBON_MILESTONE] a",
                "WHERE 1=1",
                "AND devorg = 'IPG' and[drop] ='IP Execution Commit (IE)'",
                "AND complete = 'yes'",
                "--AND [DropType] IN ('Standard')",
                "and usingproducts is not null and usingproducts <> ''",
                "and reuse = 'configurable'",
                "GROUP BY configuration",
                ",ipconfigurationid",
                ",usingproducts",
                ")IE",
                "ON IPG.ipconfigurationid = IE.ipconfigurationid/* IP3 drop*/",
                "LEFT JOIN ",
                "(SELECT configuration",
                ",ipconfigurationid",
                ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IP3Date",
                "FROM [V_IPG_CARBON_MILESTONE] a",
                "WHERE 1=1",
                "AND devorg = 'IPG' and[drop] IN ('IP3')",
                "AND complete = 'yes'",
                "and reuse = 'configurable'",
                "--AND [DropType] IN ('Standard')",
                "GROUP BY configuration",
                ",ipconfigurationid",
                ")IP3",
                "ON IPG.ipconfigurationid = IP3.ipconfigurationid",
                "WHERE trenddate is not null",
                "AND trenddate <> ''",
                "and product is not null and product <> ''",
                ") main",
                "",
                "JOIN (SELECT distinct name FROM v_ipg_carbon_product) as map ON ','+ main.[product] +',' LIKE '%,' +map.name+ ',%'",
                "group by",
                "configuration",
                ",map.name"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*-------------------------------------------------------------------------------------------------------------",
                  "1. Look up IP3 date for old config - if no trendyyyyyww then use poryyyyyww",
                  "2. Look up IE Commit date for current and future config - if no trendyyyyyww then use poryyyyyww",
                  "3. Use IE commit date first for any config. If doesn't exist then use IP3 date",
                  "4. For IE Commit, look up usingproducts to align with contract data",
                  "5. For IP3, look at requestingproducts for non-pic and usingproducts for PIC",
                  "6. Break data to get a pair and map it to feature data.",
                  "---------------------------------------------------------------------------------------------------------------*/",
                  "SELECT distinct ipg.configuration",
                  ",null as product",
                  ",isnull(IP3Date,IEdate) AS trenddate",
                  "FROM ",
                  "(SELECT configuration",
                  ",ipconfigurationid",
                  ",reuse",
                  "FROM [V_IPG_CARBON_MILESTONE] a",
                  "WHERE 1=1",
                  "AND devorg = 'IPG'",
                  "AND complete = 'yes'",
                  "--AND [DropType] IN ('Standard') --Remove this condition per Punit/Kristine's request on 10/29/21",
                  "and drop in ('IP3', 'IP Execution Commit (IE)')",
                  "and reuse <> 'configurable'",
                  ")IPG",
                  "/*IE Drop*/",
                  "LEFT JOIN ",
                  "(SELECT configuration",
                  ",ipconfigurationid",
                  ",'IEdrop' as Flag",
                  ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IEDate",
                  "FROM [V_IPG_CARBON_MILESTONE] a",
                  "WHERE 1=1",
                  "AND devorg = 'IPG' and[drop] ='IP Execution Commit (IE)'",
                  "AND complete = 'yes'",
                  "--AND [DropType] IN ('Standard')",
                  "and usingproducts is not null and usingproducts <> ''",
                  "and reuse <> 'configurable'",
                  "GROUP BY configuration",
                  ",ipconfigurationid",
                  ")IE",
                  "ON IPG.ipconfigurationid = IE.ipconfigurationid/* IP3 drop*/",
                  "LEFT JOIN ",
                  "(SELECT configuration",
                  ",ipconfigurationid",
                  ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IP3Date",
                  "FROM [V_IPG_CARBON_MILESTONE] a",
                  "WHERE 1=1",
                  "AND devorg = 'IPG' and[drop] IN ('IP3')",
                  "AND complete = 'yes'",
                  "and reuse <> 'configurable'",
                  "--AND [DropType] IN ('Standard')",
                  "GROUP BY configuration",
                  ",ipconfigurationid",
                  ")IP3",
                  "ON IPG.ipconfigurationid = IP3.ipconfigurationid",
                  "WHERE trenddate is not null",
                  "AND trenddate <> ''",
                  "",
                  "UNION ALL",
                  "",
                  "/*this data is for configurable config IE date information*/",
                  "select configuration",
                  ",map.name as product",
                  ",min(trenddate) as trenddate",
                  "from",
                  "(",
                  "SELECT ipg.configuration",
                  ", reuse",
                  ",CASE WHEN IE.Flag = 'IEdrop' THEN IE.usingproducts",
                  "WHEN reuse = 'configurable' THEN ipg.usingproducts",
                  "ELSE ipg.usingproducts END as product",
                  ",isnull(IP3Date,IEdate) AS trenddate",
                  "FROM (SELECT configuration",
                  ",ipconfigurationid",
                  ",reuse",
                  ",usingproducts",
                  "FROM [V_IPG_CARBON_MILESTONE] a",
                  "WHERE 1=1",
                  "AND devorg = 'IPG'",
                  "AND complete = 'yes'",
                  "--AND [DropType] IN ('Standard') --Remove this condition per Punit/Kristine's request on 10/29/21",
                  "and drop in ('IP3', 'IP Execution Commit (IE)')",
                  "and reuse = 'configurable'",
                  ")IPG",
                  "/*IE Drop*/",
                  "LEFT JOIN ",
                  "(SELECT configuration",
                  ",ipconfigurationid",
                  ",usingproducts",
                  ",'IEdrop' as Flag",
                  ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IEDate",
                  "FROM [V_IPG_CARBON_MILESTONE] a",
                  "WHERE 1=1",
                  "AND devorg = 'IPG' and[drop] ='IP Execution Commit (IE)'",
                  "AND complete = 'yes'",
                  "--AND [DropType] IN ('Standard')",
                  "and usingproducts is not null and usingproducts <> ''",
                  "and reuse = 'configurable'",
                  "GROUP BY configuration",
                  ",ipconfigurationid",
                  ",usingproducts",
                  ")IE",
                  "ON IPG.ipconfigurationid = IE.ipconfigurationid/* IP3 drop*/",
                  "LEFT JOIN ",
                  "(SELECT configuration",
                  ",ipconfigurationid",
                  ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IP3Date",
                  "FROM [V_IPG_CARBON_MILESTONE] a",
                  "WHERE 1=1",
                  "AND devorg = 'IPG' and[drop] IN ('IP3')",
                  "AND complete = 'yes'",
                  "and reuse = 'configurable'",
                  "--AND [DropType] IN ('Standard')",
                  "GROUP BY configuration",
                  ",ipconfigurationid",
                  ")IP3",
                  "ON IPG.ipconfigurationid = IP3.ipconfigurationid",
                  "WHERE trenddate is not null",
                  "AND trenddate <> ''",
                  "and product is not null and product <> ''",
                  ") main",
                  "",
                  "JOIN (SELECT distinct name FROM v_ipg_carbon_product) as map ON ','+ main.[product] +',' LIKE '%,' +map.name+ ',%'",
                  "group by",
                  "configuration",
                  ",map.name</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "/*-------------------------------------------------------------------------------------------------------------",
              "1. Look up IP3 date for old config - if no trendyyyyyww then use poryyyyyww",
              "2. Look up IE Commit date for current and future config - if no trendyyyyyww then use poryyyyyww",
              "3. Use IE commit date first for any config. If doesn't exist then use IP3 date",
              "4. For IE Commit, look up usingproducts to align with contract data",
              "5. For IP3, look at requestingproducts for non-pic and usingproducts for PIC",
              "6. Break data to get a pair and map it to feature data.",
              "---------------------------------------------------------------------------------------------------------------*/",
              "SELECT distinct ipg.configuration",
              ",null as product",
              ",isnull(IP3Date,IEdate) AS trenddate",
              "FROM ",
              "(SELECT configuration",
              ",ipconfigurationid",
              ",reuse",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1",
              "AND devorg = 'IPG'",
              "AND complete = 'yes'",
              "--AND [DropType] IN ('Standard') --Remove this condition per Punit/Kristine's request on 10/29/21",
              "and drop in ('IP3', 'IP Execution Commit (IE)')",
              "and reuse <> 'configurable'",
              ")IPG",
              "/*IE Drop*/",
              "LEFT JOIN ",
              "(SELECT configuration",
              ",ipconfigurationid",
              ",'IEdrop' as Flag",
              ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IEDate",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1",
              "AND devorg = 'IPG' and[drop] ='IP Execution Commit (IE)'",
              "AND complete = 'yes'",
              "--AND [DropType] IN ('Standard')",
              "and usingproducts is not null and usingproducts <> ''",
              "and reuse <> 'configurable'",
              "GROUP BY configuration",
              ",ipconfigurationid",
              ")IE",
              "ON IPG.ipconfigurationid = IE.ipconfigurationid/* IP3 drop*/",
              "LEFT JOIN ",
              "(SELECT configuration",
              ",ipconfigurationid",
              ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IP3Date",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1",
              "AND devorg = 'IPG' and[drop] IN ('IP3')",
              "AND complete = 'yes'",
              "and reuse <> 'configurable'",
              "--AND [DropType] IN ('Standard')",
              "GROUP BY configuration",
              ",ipconfigurationid",
              ")IP3",
              "ON IPG.ipconfigurationid = IP3.ipconfigurationid",
              "WHERE trenddate is not null",
              "AND trenddate <> ''",
              "",
              "UNION ALL",
              "",
              "/*this data is for configurable config IE date information*/",
              "select configuration",
              ",map.name as product",
              ",min(trenddate) as trenddate",
              "from",
              "(",
              "SELECT ipg.configuration",
              ", reuse",
              ",CASE WHEN IE.Flag = 'IEdrop' THEN IE.usingproducts",
              "WHEN reuse = 'configurable' THEN ipg.usingproducts",
              "ELSE ipg.usingproducts END as product",
              ",isnull(IP3Date,IEdate) AS trenddate",
              "FROM (SELECT configuration",
              ",ipconfigurationid",
              ",reuse",
              ",usingproducts",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1",
              "AND devorg = 'IPG'",
              "AND complete = 'yes'",
              "--AND [DropType] IN ('Standard') --Remove this condition per Punit/Kristine's request on 10/29/21",
              "and drop in ('IP3', 'IP Execution Commit (IE)')",
              "and reuse = 'configurable'",
              ")IPG",
              "/*IE Drop*/",
              "LEFT JOIN ",
              "(SELECT configuration",
              ",ipconfigurationid",
              ",usingproducts",
              ",'IEdrop' as Flag",
              ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IEDate",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1",
              "AND devorg = 'IPG' and[drop] ='IP Execution Commit (IE)'",
              "AND complete = 'yes'",
              "--AND [DropType] IN ('Standard')",
              "and usingproducts is not null and usingproducts <> ''",
              "and reuse = 'configurable'",
              "GROUP BY configuration",
              ",ipconfigurationid",
              ",usingproducts",
              ")IE",
              "ON IPG.ipconfigurationid = IE.ipconfigurationid/* IP3 drop*/",
              "LEFT JOIN ",
              "(SELECT configuration",
              ",ipconfigurationid",
              ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IP3Date",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1",
              "AND devorg = 'IPG' and[drop] IN ('IP3')",
              "AND complete = 'yes'",
              "and reuse = 'configurable'",
              "--AND [DropType] IN ('Standard')",
              "GROUP BY configuration",
              ",ipconfigurationid",
              ")IP3",
              "ON IPG.ipconfigurationid = IP3.ipconfigurationid",
              "WHERE trenddate is not null",
              "AND trenddate <> ''",
              "and product is not null and product <> ''",
              ") main",
              "",
              "JOIN (SELECT distinct name FROM v_ipg_carbon_product) as map ON ','+ main.[product] +',' LIKE '%,' +map.name+ ',%'",
              "group by",
              "configuration",
              ",map.name"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryIP3IEDrop"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*-------------------------------------------------------------------------------------------------------------",
              "1. Look up IP3 date for old config - if no trendyyyyyww then use poryyyyyww",
              "2. Look up IE Commit date for current and future config - if no trendyyyyyww then use poryyyyyww",
              "3. Use IE commit date first for any config. If doesn't exist then use IP3 date",
              "4. For IE Commit, look up usingproducts to align with contract data",
              "5. For IP3, look at requestingproducts for non-pic and usingproducts for PIC",
              "6. Break data to get a pair and map it to feature data.",
              "---------------------------------------------------------------------------------------------------------------*/",
              "SELECT distinct ipg.configuration",
              ",null as product",
              ",isnull(IP3Date,IEdate) AS trenddate",
              "FROM ",
              "(SELECT configuration",
              ",ipconfigurationid",
              ",reuse",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1",
              "AND devorg = 'IPG'",
              "AND complete = 'yes'",
              "--AND [DropType] IN ('Standard') --Remove this condition per Punit/Kristine's request on 10/29/21",
              "and drop in ('IP3', 'IP Execution Commit (IE)')",
              "and reuse <> 'configurable'",
              ")IPG",
              "/*IE Drop*/",
              "LEFT JOIN ",
              "(SELECT configuration",
              ",ipconfigurationid",
              ",'IEdrop' as Flag",
              ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IEDate",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1",
              "AND devorg = 'IPG' and[drop] ='IP Execution Commit (IE)'",
              "AND complete = 'yes'",
              "--AND [DropType] IN ('Standard')",
              "and usingproducts is not null and usingproducts <> ''",
              "and reuse <> 'configurable'",
              "GROUP BY configuration",
              ",ipconfigurationid",
              ")IE",
              "ON IPG.ipconfigurationid = IE.ipconfigurationid/* IP3 drop*/",
              "LEFT JOIN ",
              "(SELECT configuration",
              ",ipconfigurationid",
              ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IP3Date",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1",
              "AND devorg = 'IPG' and[drop] IN ('IP3')",
              "AND complete = 'yes'",
              "and reuse <> 'configurable'",
              "--AND [DropType] IN ('Standard')",
              "GROUP BY configuration",
              ",ipconfigurationid",
              ")IP3",
              "ON IPG.ipconfigurationid = IP3.ipconfigurationid",
              "WHERE trenddate is not null",
              "AND trenddate <> ''",
              "",
              "UNION ALL",
              "",
              "/*this data is for configurable config IE date information*/",
              "select configuration",
              ",map.name as product",
              ",min(trenddate) as trenddate",
              "from",
              "(",
              "SELECT ipg.configuration",
              ", reuse",
              ",CASE WHEN IE.Flag = 'IEdrop' THEN IE.usingproducts",
              "WHEN reuse = 'configurable' THEN ipg.usingproducts",
              "ELSE ipg.usingproducts END as product",
              ",isnull(IP3Date,IEdate) AS trenddate",
              "FROM (SELECT configuration",
              ",ipconfigurationid",
              ",reuse",
              ",usingproducts",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1",
              "AND devorg = 'IPG'",
              "AND complete = 'yes'",
              "--AND [DropType] IN ('Standard') --Remove this condition per Punit/Kristine's request on 10/29/21",
              "and drop in ('IP3', 'IP Execution Commit (IE)')",
              "and reuse = 'configurable'",
              ")IPG",
              "/*IE Drop*/",
              "LEFT JOIN ",
              "(SELECT configuration",
              ",ipconfigurationid",
              ",usingproducts",
              ",'IEdrop' as Flag",
              ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IEDate",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1",
              "AND devorg = 'IPG' and[drop] ='IP Execution Commit (IE)'",
              "AND complete = 'yes'",
              "--AND [DropType] IN ('Standard')",
              "and usingproducts is not null and usingproducts <> ''",
              "and reuse = 'configurable'",
              "GROUP BY configuration",
              ",ipconfigurationid",
              ",usingproducts",
              ")IE",
              "ON IPG.ipconfigurationid = IE.ipconfigurationid/* IP3 drop*/",
              "LEFT JOIN ",
              "(SELECT configuration",
              ",ipconfigurationid",
              ",cast( MAX(isnull([TrendYYYYWW],[PorYYYYWW]))as int) AS IP3Date",
              "FROM [V_IPG_CARBON_MILESTONE] a",
              "WHERE 1=1",
              "AND devorg = 'IPG' and[drop] IN ('IP3')",
              "AND complete = 'yes'",
              "and reuse = 'configurable'",
              "--AND [DropType] IN ('Standard')",
              "GROUP BY configuration",
              ",ipconfigurationid",
              ")IP3",
              "ON IPG.ipconfigurationid = IP3.ipconfigurationid",
              "WHERE trenddate is not null",
              "AND trenddate <> ''",
              "and product is not null and product <> ''",
              ") main",
              "",
              "JOIN (SELECT distinct name FROM v_ipg_carbon_product) as map ON ','+ main.[product] +',' LIKE '%,' +map.name+ ',%'",
              "group by",
              "configuration",
              ",map.name</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryCarbonConfigurationName",
        "columns": [
          {
            "name": "name",
            "dataType": "string",
            "sourceColumn": "name",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "QueryCarbonConfigurationName",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "Select distinct name",
                "from [V_IPG_CARBON_IPCONFIGURATION]",
                "where hsdesstatus = 'obsolete'"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>Select distinct name",
                  "from [V_IPG_CARBON_IPCONFIGURATION]",
                  "where hsdesstatus = 'obsolete'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "Select distinct name",
              "from [V_IPG_CARBON_IPCONFIGURATION]",
              "where hsdesstatus = 'obsolete'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryCarbonConfigurationName"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>Select distinct name",
              "from [V_IPG_CARBON_IPCONFIGURATION]",
              "where hsdesstatus = 'obsolete'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryCarbonMilestoneConfiguration",
        "columns": [
          {
            "name": "configuration",
            "dataType": "string",
            "sourceColumn": "configuration",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "QueryCarbonMilestoneConfiguration",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "Select  distinct configuration",
                "from [V_IPG_CARBON_MILESTONE]",
                "where devorg = 'IPG'"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>Select  distinct configuration",
                  "from [V_IPG_CARBON_MILESTONE]",
                  "where devorg = 'IPG'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "Select  distinct configuration",
              "from [V_IPG_CARBON_MILESTONE]",
              "where devorg = 'IPG'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryCarbonMilestoneConfiguration"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>Select  distinct configuration",
              "from [V_IPG_CARBON_MILESTONE]",
              "where devorg = 'IPG'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryExecutionMilestone",
        "columns": [
          {
            "name": "configuration",
            "dataType": "string",
            "sourceColumn": "configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "is_execution_drop",
            "dataType": "int64",
            "sourceColumn": "is_execution_drop",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "QueryExecutionMilestone",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "/* Select  distinct a.configuration , b.[is_execution_drop]",
                "from [V_IPG_CARBON_MILESTONE] a join (Select distinct configuration  ,case when ([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
                "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
                "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
                "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%') then 1 else 0 end as  [is_execution_drop] from [V_IPG_CARBON_MILESTONE] )  b",
                "",
                "ON a.configuration  = b.configuration",
                "and  devorg = 'IPG'",
                "and [is_execution_drop] = 1",
                "*/",
                "",
                "select distinct configuration, 1 as [is_execution_drop] from v_ipg_carbon_milestone",
                "where devorg = 'ipg' ",
                "and([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
                "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
                "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
                "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%')"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/* Select  distinct a.configuration , b.[is_execution_drop]",
                  "from [V_IPG_CARBON_MILESTONE] a join (Select distinct configuration  ,case when ([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
                  "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
                  "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
                  "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%') then 1 else 0 end as  [is_execution_drop] from [V_IPG_CARBON_MILESTONE] )  b",
                  "",
                  "ON a.configuration  = b.configuration",
                  "and  devorg = 'IPG'",
                  "and [is_execution_drop] = 1",
                  "*/",
                  "",
                  "select distinct configuration, 1 as [is_execution_drop] from v_ipg_carbon_milestone",
                  "where devorg = 'ipg' ",
                  "and([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
                  "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
                  "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
                  "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "/* Select  distinct a.configuration , b.[is_execution_drop]",
              "from [V_IPG_CARBON_MILESTONE] a join (Select distinct configuration  ,case when ([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
              "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%') then 1 else 0 end as  [is_execution_drop] from [V_IPG_CARBON_MILESTONE] )  b",
              "",
              "ON a.configuration  = b.configuration",
              "and  devorg = 'IPG'",
              "and [is_execution_drop] = 1",
              "*/",
              "",
              "select distinct configuration, 1 as [is_execution_drop] from v_ipg_carbon_milestone",
              "where devorg = 'ipg' ",
              "and([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
              "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%')"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryExecutionMilestone"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/* Select  distinct a.configuration , b.[is_execution_drop]",
              "from [V_IPG_CARBON_MILESTONE] a join (Select distinct configuration  ,case when ([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
              "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%') then 1 else 0 end as  [is_execution_drop] from [V_IPG_CARBON_MILESTONE] )  b",
              "",
              "ON a.configuration  = b.configuration",
              "and  devorg = 'IPG'",
              "and [is_execution_drop] = 1",
              "*/",
              "",
              "select distinct configuration, 1 as [is_execution_drop] from v_ipg_carbon_milestone",
              "where devorg = 'ipg' ",
              "and([Drop] in('EV','EVR','POLO','UV','PROD','EV1','EV2','UV','UV1','UV2','eFV','FV','Pre Alpha','Alpha','Beta','PV') ",
              "\t\t\t\t\t\tor [Drop] like '%RTL%'   or [Drop] like '%VIP%'   or [Drop] like '%IP PO%' or  [Drop] like '%ECO%' ",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW%'or  [Drop] like '%IP DRV%'",
              "\t\t\t\t\t\tor  [Drop] like '%IP FW_DRV%')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "All_Status",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "status_guide",
            "dataType": "string",
            "isNameInferred": false,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryFeature[status]"
          },
          {
            "type": "calculated",
            "name": "status_detail",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(All_Status[status_guide], ",
              "\"In Architecture_InEC\", \"In Plan for EC\", ",
              "\"In Architecture_OutEC\", \"Outside of EC\",",
              "\"In Architecture_NoDueDate\", \"No Due Date\", ",
              "\"In Architecture_NoEC\", \"No EC Date\", ",
              "\"In Architecture\", \"FHAS AVAIL\",",
              "\"Exploration_InEC\", \"In Plan for EC\", ",
              "\"Exploration_OutEC\", \"Outside of EC\",",
              "\"Exploration_NoEC\", \"No EC Date\",",
              "\"Exploration\", \"No Due Date\", ",
              "\"\")"
            ],
            "sortByColumn": "detail_sort_order"
          },
          {
            "type": "calculated",
            "name": "status",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(All_Status[status_guide], ",
              "\"In Architecture_InEC\", \"In Architecture\", ",
              "\"In Architecture_OutEC\", \"In Architecture\",",
              "\"In Architecture_NoDueDate\", \"In Architecture\", ",
              "\"In Architecture_NoEC\", \"In Architecture\", ",
              "\"In Architecture\", \"In Architecture\", ",
              "\"Exploration_InEC\", \"Exploration\", ",
              "\"Exploration_OutEC\", \"Exploration\",",
              "\"Exploration_NoEC\", \"Exploration\",",
              "\"Exploration\", \"Exploration\",",
              "All_Status[status_guide])"
            ],
            "sortByColumn": "sort_order"
          },
          {
            "type": "calculated",
            "name": "sort_order",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(All_Status[status_guide],",
              "\"More Info\", 0,",
              "\"New\",1,",
              "\"Exploration\",2,",
              "\"Exploration_InEC\",2,",
              "\"Exploration_OutEC\",2,",
              "\"Exploration_NoEC\",2,",
              "\"In Architecture\",3,",
              "\"In Architecture_InEC\", 3,",
              "\"In Architecture_OutEC\", 3,",
              "\"In Architecture_NoDueDate\", 3,",
              "\"In Architecture_NoEC\", 3,",
              "\"In Execution\",4,",
              "\"Scheduled\",5,",
              "\"Alpha\",6,",
              "\"Beta\",7,",
              "\"In Production\", 8,",
              "\"More Info\", 9,",
              "\"Deferred\", 10,",
              "\"Abandoned\", 11, ",
              "\"Rejected \", 12,",
              "20)"
            ]
          },
          {
            "type": "calculated",
            "name": "condense_status",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(CONTAINSSTRING(All_Status[status_guide], \"In Arch\"), \"Exploration / In Architecture\", ",
              "    If(CONTAINSSTRING(All_Status[status_guide], \"Exploration\"), \"Exploration / In Architecture\", All_Status[status_guide]))"
            ],
            "sortByColumn": "condense_sort_order"
          },
          {
            "type": "calculated",
            "name": "condense_sort_order",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(All_Status[status_guide],",
              "\"More Info\", 0,",
              "\"New\",1,",
              "\"Exploration\",2,",
              "\"Exploration_InEC\",2,",
              "\"Exploration_OutEC\",2,",
              "\"Exploration_NoEC\",2,",
              "\"In Architecture\",2,",
              "\"In Architecture_InEC\", 2,",
              "\"In Architecture_OutEC\", 2,",
              "\"In Architecture_NoDueDate\", 2,",
              "\"In Architecture_NoEC\", 2,",
              "\"In Execution\",4,",
              "\"Scheduled\",5,",
              "\"Alpha\",6,",
              "\"Beta\",7,",
              "\"In Production\", 8,",
              "\"More Info\", 9,",
              "\"Deferred\", 10,",
              "\"Abandoned\", 11, ",
              "\"Rejected \", 12,",
              "20)"
            ]
          },
          {
            "type": "calculated",
            "name": "detail_sort_order",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(All_Status[status_guide], ",
              "",
              "\"Exploration_InEC\", 1,",
              "\"Exploration_OutEC\", 2,",
              "\"Exploration\", 4,",
              "\"In Architecture_InEC\", 1,",
              "\"In Architecture_OutEC\", 2,",
              "\"In Architecture\", 3,",
              "\"In Architecture_NoDueDate\", 4,",
              "10)",
              "",
              "",
              "",
              ""
            ]
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "UNION(Values(QueryFeature[status]), {\"Total\"}",
                ", {\"In Architecture_InEC\"},  {\"In Architecture_OutEC\"}, {\"In Architecture_NoDueDate\"}, {\"In Architecture_NoEC\"}",
                ", {\"Exploration_InEC\"},  {\"Exploration_OutEC\"}, {\"Exploration_NoEC\"})"
              ]
            }
          }
        ]
      },
      {
        "name": "Delta_Value",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Value",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Value]"
          },
          {
            "type": "calculated",
            "name": "ValueText",
            "dataType": "string",
            "isDataTypeInferred": false,
            "expression": "[value]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "GENERATESERIES(-1000, 1000, 1)"
            }
          }
        ]
      },
      {
        "name": "WW_Value",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Value",
            "dataType": "int64",
            "isNameInferred": false,
            "isDataTypeInferred": true,
            "sourceColumn": "V_DIM_IntelWWSeqNbr[Intel Year-Work Week]"
          },
          {
            "type": "calculated",
            "name": "WWText",
            "dataType": "string",
            "isDataTypeInferred": false,
            "expression": "WW_Value[Value]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "VALUES(V_DIM_IntelWWSeqNbr[Intel Year-Work Week])"
            }
          }
        ]
      },
      {
        "name": "status_bridge",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "status",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryFeature[status]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "Distinct(VALUES(QueryFeature[status]))"
            }
          }
        ]
      },
      {
        "name": "QueryIPGReuse",
        "columns": [
          {
            "name": "configuration",
            "dataType": "string",
            "sourceColumn": "configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "reuse",
            "dataType": "string",
            "sourceColumn": "reuse",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "QueryIPGReuse",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "Select distinct configuration, reuse",
                "from  v_ipg_carbon_milestone",
                "where devorg = 'IPG'"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>Select distinct configuration, reuse",
                  "from  v_ipg_carbon_milestone",
                  "where devorg = 'IPG'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "Select distinct configuration, reuse",
              "from  v_ipg_carbon_milestone",
              "where devorg = 'IPG'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryIPGReuse"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>Select distinct configuration, reuse",
              "from  v_ipg_carbon_milestone",
              "where devorg = 'IPG'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "FHAS_Progress",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "FHASID",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[FHASID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "FHASScolumn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[FHASScolumn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "FhasValue",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[FhasValue]"
          },
          {
            "type": "calculated",
            "name": "Complete",
            "dataType": "string",
            "isDataTypeInferred": false,
            "expression": [
              "SWITCH( [FhasValue] , \"Decide\",\"Complete\",",
              "\"Agree\",\"Complete\",",
              "\"Apha\",\"Complete\",",
              "\"Beta\",\"Complete\",",
              "\"In Production\",\"Complete\",",
              "\"In Execution\",\"Complete\",",
              "\"Closed\",\"Complete\",",
              "\"Scheduled\",\"Complete\",",
              "\"Released\",\"Complete\",",
              "\"Not Complete\")"
            ]
          },
          {
            "type": "calculated",
            "name": "Planned",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(FHAS_Progress[FHASScolumn]=\"duedate\" && FHAS_Progress[FhasValue]=\"No_due_date\",\"Not Planned\",SWITCH( [FhasValue] , \"Decide\",\"Complete\",",
              "\"Agree\",\"Complete\",",
              "\"Apha\",\"Complete\",",
              "\"Beta\",\"Complete\",",
              "\"In Production\",\"Complete\",",
              "\"In Execution\",\"Complete\",",
              "\"Closed\",\"Complete\",",
              "\"Scheduled\",\"Complete\",",
              "\"Released\",\"Complete\",",
              "\"Planned\"))"
            ]
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "UNION(",
                "SELECTCOLUMNS(QueryFeature,",
                "\"FHASID\", QueryFeature[LatestUniqueID],",
                "\"FHASScolumn\", \"Status\",",
                "\"FhasValue\", QueryFeature[status]",
                ")",
                ", SELECTCOLUMNS(QueryFeature,",
                " \"FHASID\", QueryFeature[LatestUniqueID],",
                "  \"FHASScolumn\", \"State\",",
                "\"FhasValue\", QueryFeature[state]",
                ")",
                ", SELECTCOLUMNS(QueryFeature,",
                " \"FHASID\", QueryFeature[LatestUniqueID],",
                "  \"FHASScolumn\", \"duedate\",",
                "\"FhasValue\", QueryFeature[Final_WW_duedate] ",
                ")",
                ", SELECTCOLUMNS(QueryFeature,",
                "\"FHASID\", QueryFeature[LatestUniqueID],",
                "\"FHASScolumn\", \"phase\",",
                "\"FhasValue\", QueryFeature[Phase] ",
                ")",
                ", SELECTCOLUMNS(QueryFeature,",
                "\"FHASID\", QueryFeature[LatestUniqueID],",
                "\"FHASScolumn\", \"priority\",",
                "\"FhasValue\", QueryFeature[priority] ",
                ")",
                "",
                ")",
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "Progress_ww_map",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Value",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Value]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Intel Year-Work Week",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "V_DIM_IntelWWSeqNbr[Intel Year-Work Week]"
          },
          {
            "type": "calculated",
            "name": "progress_ww",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "CONCATENATE('Progress_ww_map'[Value],'Progress_ww_map'[Intel Year-Work Week])"
          },
          {
            "type": "calculated",
            "name": "progress_ww_val",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "Progress_ww_map[Value]&\" \"&Progress_ww_map[Intel Year-Work Week]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "UNION(CROSSJOIN({\" Planned\", \"Complete\"}, CALCULATETABLE(VALUES(V_DIM_IntelWWSeqNbr[Intel Year-Work Week]))), ROW(\"Value\", \"No Date\", \"Intel Year-Work Week\", \"No Date\")  )"
            }
          }
        ]
      },
      {
        "name": "v_intel_ww",
        "columns": [
          {
            "name": "Intel Year-Work Week",
            "dataType": "string",
            "sourceColumn": "Intel Year-Work Week",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "v_intel_ww",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
                "UNION",
                "select TOP 1 'No date' as [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
                  "UNION",
                  "select TOP 1 'No date' as [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
              "UNION",
              "select TOP 1 'No date' as [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "v_intel_ww"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
              "UNION",
              "select TOP 1 'No date' as [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryIEDrops",
        "columns": [
          {
            "name": "configuration",
            "dataType": "string",
            "sourceColumn": "configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "drop",
            "dataType": "string",
            "sourceColumn": "drop",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "POR",
            "dataType": "int64",
            "sourceColumn": "POR"
          },
          {
            "name": "Trend",
            "dataType": "int64",
            "sourceColumn": "Trend"
          }
        ],
        "partitions": [
          {
            "name": "QueryIEDrops",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct configuration, drop, min([PorYYYYWW]) as [POR], min([TrendYYYYWW]) as [Trend]",
                "from v_ipg_carbon_milestone where drop = 'IP Execution Commit (IE)'",
                "group by configuration, drop"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct configuration, drop, min([PorYYYYWW]) as [POR], min([TrendYYYYWW]) as [Trend]",
                  "from v_ipg_carbon_milestone where drop = 'IP Execution Commit (IE)'",
                  "group by configuration, drop</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct configuration, drop, min([PorYYYYWW]) as [POR], min([TrendYYYYWW]) as [Trend]",
              "from v_ipg_carbon_milestone where drop = 'IP Execution Commit (IE)'",
              "group by configuration, drop"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryIEDrops"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct configuration, drop, min([PorYYYYWW]) as [POR], min([TrendYYYYWW]) as [Trend]",
              "from v_ipg_carbon_milestone where drop = 'IP Execution Commit (IE)'",
              "group by configuration, drop</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "FHAS_Progress_trend",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "FHASID",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[FHASID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "FHASScolumn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[FHASScolumn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "FhasValue",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[FhasValue]"
          },
          {
            "type": "calculated",
            "name": "Complete",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH( [FhasValue] , \"Decide\",\"Complete\",",
              "\"Agree\",\"Complete\",",
              "\"Apha\",\"Complete\",",
              "\"Beta\",\"Complete\",",
              "\"In Production\",\"Complete\",",
              "\"In Execution\",\"Complete\",",
              "\"Closed\",\"Complete\",",
              "\"Scheduled\",\"Complete\",",
              "\"Released\",\"Complete\",",
              "\"Not Complete\")"
            ]
          },
          {
            "type": "calculated",
            "name": "Planned",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(FHAS_Progress_trend[FHASScolumn]=\"duedate\" && FHAS_Progress_trend[FhasValue]=\"No_due_date\",\"Not Planned\",SWITCH( [FhasValue] , \"Decide\",\"Complete\",",
              "\"Agree\",\"Complete\",",
              "\"Apha\",\"Complete\",",
              "\"Beta\",\"Complete\",",
              "\"In Production\",\"Complete\",",
              "\"In Execution\",\"Complete\",",
              "\"Closed\",\"Complete\",",
              "\"Scheduled\",\"Complete\",",
              "\"Released\",\"Complete\",",
              "\"Planned\"))"
            ]
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "UNION(",
                "SELECTCOLUMNS(QueryFeature,",
                "\"FHASID\", QueryFeature[LatestUniqueID],",
                "\"FHASScolumn\", \"Status\",",
                "\"FhasValue\", QueryFeature[status]",
                ")",
                ", SELECTCOLUMNS(QueryFeature,",
                " \"FHASID\", QueryFeature[LatestUniqueID],",
                "  \"FHASScolumn\", \"State\",",
                "\"FhasValue\", QueryFeature[state]",
                ")",
                ", SELECTCOLUMNS(QueryFeature,",
                " \"FHASID\", QueryFeature[LatestUniqueID],",
                "  \"FHASScolumn\", \"duedate\",",
                "\"FhasValue\", QueryFeature[Final_ww_Trenddate] ",
                ")",
                ", SELECTCOLUMNS(QueryFeature,",
                "\"FHASID\", QueryFeature[LatestUniqueID],",
                "\"FHASScolumn\", \"phase\",",
                "\"FhasValue\", QueryFeature[Phase] ",
                ")",
                ", SELECTCOLUMNS(QueryFeature,",
                "\"FHASID\", QueryFeature[LatestUniqueID],",
                "\"FHASScolumn\", \"priority\",",
                "\"FhasValue\", QueryFeature[priority] ",
                ")",
                ")"
              ]
            }
          }
        ]
      },
      {
        "name": "Progress_ww_map_trend",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Value",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Value]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Intel Year-Work Week",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "V_DIM_IntelWWSeqNbr[Intel Year-Work Week]"
          },
          {
            "type": "calculated",
            "name": "progress_ww",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "CONCATENATE('Progress_ww_map_trend'[Value],'Progress_ww_map_trend'[Intel Year-Work Week])"
          },
          {
            "type": "calculated",
            "name": "progress_ww_val",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "Progress_ww_map_trend[Value]&\" \"&Progress_ww_map_trend[Intel Year-Work Week]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "UNION(CROSSJOIN({\" Planned\", \"Complete\"}, CALCULATETABLE(VALUES(V_DIM_IntelWWSeqNbr[Intel Year-Work Week]))), ROW(\"Value\", \"No Date\", \"Intel Year-Work Week\", \"No Date\")  )"
            }
          }
        ]
      },
      {
        "name": "v_intel_ww_trend",
        "columns": [
          {
            "name": "Intel Year-Work Week",
            "dataType": "string",
            "sourceColumn": "Intel Year-Work Week",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "v_intel_ww_trend",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
                "UNION",
                "select TOP 1 'No date' as [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
                  "UNION",
                  "select TOP 1 'No date' as [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
              "UNION",
              "select TOP 1 'No date' as [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "v_intel_ww_trend"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
              "UNION",
              "select TOP 1 'No date' as [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "v_date_type",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Type",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Type]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Value",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Value]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "UNION(ROW(\"Type\",\"Trend Date\",\"Value\",1),ROW(\"Type\",\"Due Date\",\"Value\",2),ROW(\"Type\",\"Trend_Due Date\",\"Value\",3))"
            }
          }
        ]
      },
      {
        "name": "Progress_ww_map_trend_due",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Value",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Value]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Intel Year-Work Week",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "V_DIM_IntelWWSeqNbr[Intel Year-Work Week]"
          },
          {
            "type": "calculated",
            "name": "progress_ww",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "CONCATENATE('Progress_ww_map_trend_due'[Value],'Progress_ww_map_trend_due'[Intel Year-Work Week])"
          },
          {
            "type": "calculated",
            "name": "progress_ww_val",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "Progress_ww_map_trend_due[Value]&\" \"&Progress_ww_map_trend_due[Intel Year-Work Week]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "UNION(CROSSJOIN({\" Planned\", \"Complete\"}, CALCULATETABLE(VALUES(V_DIM_IntelWWSeqNbr[Intel Year-Work Week]))), ROW(\"Value\", \"No Date\", \"Intel Year-Work Week\", \"No Date\")  )"
            }
          }
        ],
        "hierarchies": [
          {
            "name": "Hierarchy1"
          }
        ]
      },
      {
        "name": "v_intel_ww_trend_due",
        "columns": [
          {
            "name": "Intel Year-Work Week",
            "dataType": "string",
            "sourceColumn": "Intel Year-Work Week",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "v_intel_ww_trend_due",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
                "UNION",
                "select TOP 1 'No date' as [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
                  "UNION",
                  "select TOP 1 'No date' as [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
              "UNION",
              "select TOP 1 'No date' as [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "v_intel_ww_trend_due"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]",
              "UNION",
              "select TOP 1 'No date' as [Intel Year-Work Week] from [V_TIME_DAY_CachedTable]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "DEG_Product_Manual_POPL3",
        "columns": [
          {
            "name": "POPL3 Date",
            "dataType": "string",
            "sourceColumn": "POPL3 Date",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SoC Die",
            "dataType": "string",
            "sourceColumn": "SoC Die",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ibi_updated_date",
            "dataType": "dateTime",
            "sourceColumn": "ibi_updated_date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          }
        ],
        "partitions": [
          {
            "name": "DEG_Product_Manual_POPL3",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select * from IPG_Product_Manual_POPL3",
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from IPG_Product_Manual_POPL3</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select * from IPG_Product_Manual_POPL3"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "DEG_Product_Manual_POPL3"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from IPG_Product_Manual_POPL3</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "QueryJiraProductName",
        "columns": [
          {
            "name": "dyn_lookup.value",
            "dataType": "string",
            "sourceColumn": "dyn_lookup.value",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "dyn_lookup.lookup_name",
            "dataType": "string",
            "sourceColumn": "dyn_lookup.lookup_name",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ip_leadership.dyn_lookup.product",
            "dataType": "string",
            "sourceColumn": "ip_leadership.dyn_lookup.product",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "recent_update",
            "dataType": "dateTime",
            "sourceColumn": "recent_update",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          }
        ],
        "partitions": [
          {
            "name": "QueryJiraProductName",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select *",
                "from cached_ipg_jira_affected_products_name"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select *",
                  "from cached_ipg_jira_affected_products_name</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select *",
              "from cached_ipg_jira_affected_products_name"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryJiraProductName"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select *",
              "from cached_ipg_jira_affected_products_name</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryJiraSocDieName1",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "dyn_lookup.value",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryJiraProductName[dyn_lookup.value]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "dyn_lookup.lookup_name",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryJiraProductName[dyn_lookup.lookup_name]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Soc Die Name",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Soc Die Name]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "SUMMARIZE(QueryJiraProductName,QueryJiraProductName[dyn_lookup.value],QueryJiraProductName[dyn_lookup.lookup_name],\"Soc Die Name\",CONCATENATEX(VALUES(QueryJiraProductName[ip_leadership.dyn_lookup.product]),QueryJiraProductName[ip_leadership.dyn_lookup.product],\",\"))"
            }
          }
        ]
      },
      {
        "name": "QueryJiraSocDieName2",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "dyn_lookup.value",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryJiraProductName[dyn_lookup.value]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "dyn_lookup.lookup_name",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryJiraProductName[dyn_lookup.lookup_name]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Soc Die Name",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Soc Die Name]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "SUMMARIZE(QueryJiraProductName,QueryJiraProductName[dyn_lookup.value],QueryJiraProductName[dyn_lookup.lookup_name],\"Soc Die Name\",CONCATENATEX(VALUES(QueryJiraProductName[ip_leadership.dyn_lookup.product]),QueryJiraProductName[ip_leadership.dyn_lookup.product],\",\"))"
            }
          }
        ]
      },
      {
        "name": "QueryJiraSocDieName3",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "dyn_lookup.value",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryJiraProductName[dyn_lookup.value]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "dyn_lookup.lookup_name",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryJiraProductName[dyn_lookup.lookup_name]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Soc Die Name",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Soc Die Name]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "SUMMARIZE(QueryJiraProductName,QueryJiraProductName[dyn_lookup.value],QueryJiraProductName[dyn_lookup.lookup_name],\"Soc Die Name\",CONCATENATEX(VALUES(QueryJiraProductName[ip_leadership.dyn_lookup.product]),QueryJiraProductName[ip_leadership.dyn_lookup.product],\",\"))"
            }
          }
        ]
      },
      {
        "name": "QueryJiraSocDieName4",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "dyn_lookup.value",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryJiraProductName[dyn_lookup.value]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "dyn_lookup.lookup_name",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryJiraProductName[dyn_lookup.lookup_name]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Soc Die Name",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Soc Die Name]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "SUMMARIZE(QueryJiraProductName,QueryJiraProductName[dyn_lookup.value],QueryJiraProductName[dyn_lookup.lookup_name],\"Soc Die Name\",CONCATENATEX(VALUES(QueryJiraProductName[ip_leadership.dyn_lookup.product]),QueryJiraProductName[ip_leadership.dyn_lookup.product],\",\"))"
            }
          }
        ]
      },
      {
        "name": "QueryJiraSocDieName5",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "dyn_lookup.value",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryJiraProductName[dyn_lookup.value]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "dyn_lookup.lookup_name",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryJiraProductName[dyn_lookup.lookup_name]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Soc Die Name",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Soc Die Name]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "SUMMARIZE(QueryJiraProductName,QueryJiraProductName[dyn_lookup.value],QueryJiraProductName[dyn_lookup.lookup_name],\"Soc Die Name\",CONCATENATEX(VALUES(QueryJiraProductName[ip_leadership.dyn_lookup.product]),QueryJiraProductName[ip_leadership.dyn_lookup.product],\",\"))"
            }
          }
        ]
      },
      {
        "name": "QueryObsoleteConfig",
        "columns": [
          {
            "name": "name",
            "dataType": "string",
            "sourceColumn": "name",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "is_obsolete",
            "dataType": "int64",
            "sourceColumn": "is_obsolete",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "QueryObsoleteConfig",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "Select distinct name",
                ",CASE WHEN hsdesstatus = 'obsolete' THEN 1 ELSE 0 END is_obsolete",
                "from [V_IPG_CARBON_IPCONFIGURATION]",
                "where org = 'ipg'"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>Select distinct name",
                  ",CASE WHEN hsdesstatus = 'obsolete' THEN 1 ELSE 0 END is_obsolete",
                  "from [V_IPG_CARBON_IPCONFIGURATION]",
                  "where org = 'ipg'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "Select distinct name",
              ",CASE WHEN hsdesstatus = 'obsolete' THEN 1 ELSE 0 END is_obsolete",
              "from [V_IPG_CARBON_IPCONFIGURATION]",
              "where org = 'ipg'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryObsoleteConfig"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>Select distinct name",
              ",CASE WHEN hsdesstatus = 'obsolete' THEN 1 ELSE 0 END is_obsolete",
              "from [V_IPG_CARBON_IPCONFIGURATION]",
              "where org = 'ipg'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      }
    ],
    "relationships": [
      {
        "name": "64276f40-8243-4bf4-84d2-7d6dce6bba24",
        "fromTable": "QueryFeature",
        "fromColumn": "ProductIPKey",
        "toTable": "QueryRTL1p0",
        "toColumn": "pfKey"
      },
      {
        "name": "8dbc751c-83ba-4297-9a12-67881d44847b",
        "fromTable": "QueryFeature",
        "fromColumn": "ProductIPKey",
        "toTable": "QueryActiveProductIP",
        "toColumn": "pfkey"
      },
      {
        "name": "c8e024f8-a247-4660-9b6f-36f63cd8c12e",
        "fromTable": "QueryProductTapein",
        "fromColumn": "TrendYYYYWW",
        "toTable": "QueryProductTapeinSeqNbr",
        "toColumn": "Intel Year-Work Week"
      },
      {
        "name": "189e689a-9149-48a5-a788-321b4a64d454",
        "fromTable": "QueryFeature",
        "fromColumn": "SoC Die",
        "toTable": "QueryProductTapein",
        "toColumn": "product"
      },
      {
        "name": "791aa5ab-64ce-4bb3-8196-9de9ae8738a8",
        "fromTable": "QueryFeature",
        "fromColumn": "SoC Die",
        "toTable": "QueryIPGCustomers",
        "toColumn": "project"
      },
      {
        "name": "ab05f814-2009-439e-819f-171b28e4fce2",
        "fromTable": "QueryFeature",
        "fromColumn": "Configuration",
        "toTable": "QueryGeneration",
        "toColumn": "name"
      },
      {
        "name": "9f160516-021a-4f63-bb30-a2ba7123f6c7",
        "fromTable": "QueryFeature",
        "fromColumn": "Alpha_MiletstoneID",
        "toTable": "QueryMilestone",
        "toColumn": "milestoneid"
      },
      {
        "name": "9705be22-41a8-4a48-978e-587bc27c1445",
        "fromTable": "QueryFeature",
        "fromColumn": "ww_submitted_date",
        "toTable": "QueryIntelCalendar",
        "toColumn": "Intel Year-Work Week"
      },
      {
        "name": "dd1b6bd3-6952-447a-aa68-8b1fec4763d7",
        "fromTable": "QueryFeature",
        "fromColumn": "status",
        "toTable": "QueryJiraOwner",
        "toColumn": "Status"
      },
      {
        "name": "459e2b22-771b-42dd-a775-ac1639ac4b71",
        "fromTable": "QueryFeature",
        "fromColumn": "SoC Die",
        "toTable": "QueryPOPL3-EC",
        "toColumn": "project"
      },
      {
        "name": "bfe2772d-b288-47c8-b6d2-4057cd18fe93",
        "fromTable": "QueryFeature",
        "fromColumn": "SoC Die",
        "toTable": "QueryPOPL2",
        "toColumn": "project"
      },
      {
        "name": "94230fe1-6d1b-418d-860b-c4dfc20d6d20",
        "fromTable": "QueryFeature",
        "fromColumn": "Product_Config_UniqueKey",
        "toTable": "QueryIEMilestone",
        "toColumn": "UniqueKey"
      },
      {
        "name": "2f00f4de-6343-401f-8e16-04cf49f1258c",
        "fromTable": "QueryFeature",
        "fromColumn": "Product_Config_UniqueKey",
        "toTable": "QueryIP3IEDrop",
        "toColumn": "Uniquekey"
      },
      {
        "name": "1a7cc4c0-1045-447e-8abc-6a798a9274ec",
        "fromTable": "DynamicLegend",
        "fromColumn": "LegendID",
        "toTable": "QueryFeature",
        "toColumn": "LatestUniqueID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "7543c1fc-4864-4a7b-81ef-d7d113c9a780",
        "fromTable": "DynamicAxis",
        "fromColumn": "AxisID",
        "toTable": "QueryFeature",
        "toColumn": "LatestUniqueID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "01329d90-51e4-4202-b34a-4553a8e01a37",
        "fromTable": "DyanmicFeatureCalendar",
        "fromColumn": "ID",
        "toTable": "QueryFeature",
        "toColumn": "LatestUniqueID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "8b65232a-4442-4242-b078-30b93f964249",
        "fromTable": "QueryFeature",
        "fromColumn": "Configuration",
        "toTable": "QueryCarbonConfigurationName",
        "toColumn": "name"
      },
      {
        "name": "f1dffacc-4297-49eb-b9ec-0e9097079333",
        "fromTable": "QueryFeature",
        "fromColumn": "Configuration",
        "toTable": "QueryCarbonMilestoneConfiguration",
        "toColumn": "configuration"
      },
      {
        "name": "82670fd2-4f55-4bae-a7c4-7129cb10ab9a",
        "fromTable": "QueryFeature",
        "fromColumn": "Configuration",
        "toTable": "QueryExecutionMilestone",
        "toColumn": "configuration"
      },
      {
        "name": "29438404-610c-4bdf-9a51-4eefa44ad123",
        "fromTable": "QueryFeature",
        "fromColumn": "status",
        "toTable": "status_bridge",
        "toColumn": "status",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "f730e079-5ed1-45cf-a889-1acbc9a8df94",
        "fromTable": "All_Status",
        "fromColumn": "status",
        "toTable": "status_bridge",
        "toColumn": "status"
      },
      {
        "name": "146d188b-a262-4f00-83da-cc4d25b5f934",
        "fromTable": "QueryFeature",
        "fromColumn": "Configuration",
        "toTable": "QueryIPGReuse",
        "toColumn": "configuration"
      },
      {
        "name": "c3d8acc3-734e-4269-8b9d-b79413a1da76",
        "fromTable": "FHAS_Progress",
        "fromColumn": "FHASID",
        "toTable": "QueryFeature",
        "toColumn": "LatestUniqueID",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "c29b3bf6-537e-4e21-9a7d-515b48d2a98e",
        "fromTable": "Progress_ww_map",
        "fromColumn": "Intel Year-Work Week",
        "toTable": "v_intel_ww",
        "toColumn": "Intel Year-Work Week",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "3f0f90f2-23c2-472c-adc4-d66b8bdca9e5",
        "fromTable": "QueryFeature",
        "fromColumn": "Configuration",
        "toTable": "QueryIEDrops",
        "toColumn": "configuration"
      },
      {
        "name": "9289d010-2be7-4289-b7c4-7b2fe1013e0c",
        "fromTable": "QueryFeature",
        "fromColumn": "Final_WW_duedate",
        "toTable": "v_intel_ww",
        "toColumn": "Intel Year-Work Week",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "13c9edfb-8e45-4ce0-83a1-c98628195b06",
        "fromTable": "FHAS_Progress_trend",
        "fromColumn": "FHASID",
        "toTable": "QueryFeature",
        "toColumn": "LatestUniqueID"
      },
      {
        "name": "959b92af-49e2-46f5-90b0-b3dc1a94a9f4",
        "fromTable": "QueryFeature",
        "fromColumn": "Final_ww_Trenddate",
        "toTable": "v_intel_ww_trend",
        "toColumn": "Intel Year-Work Week",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "e126875b-d4e2-4dbc-b6c0-7d0302238925",
        "fromTable": "QueryFeature",
        "fromColumn": "final_ww_trend_due_date",
        "toTable": "v_intel_ww_trend_due",
        "toColumn": "Intel Year-Work Week",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "38a7c953-b53e-4653-983c-7a1a49bffc7a",
        "fromTable": "Progress_ww_map_trend",
        "fromColumn": "Intel Year-Work Week",
        "toTable": "v_intel_ww_trend",
        "toColumn": "Intel Year-Work Week",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "b2880d4b-5b9a-49c0-bce8-3e0383be95fa",
        "fromTable": "Progress_ww_map_trend_due",
        "fromColumn": "Intel Year-Work Week",
        "toTable": "v_intel_ww_trend_due",
        "toColumn": "Intel Year-Work Week",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "edbdcaa8-a0b8-49ae-a8a7-1fd0adbd33c3",
        "fromTable": "QueryFeature",
        "fromColumn": "SoC Die",
        "toTable": "DEG_Product_Manual_POPL3",
        "toColumn": "SoC Die"
      },
      {
        "name": "86e992d2-e012-4cf6-86a1-02ccd3fc8218",
        "fromTable": "QueryFeature",
        "fromColumn": "SoC Die 1",
        "toTable": "QueryJiraSocDieName1",
        "toColumn": "dyn_lookup.value"
      },
      {
        "name": "7d70217b-d44e-4deb-b5b4-05820498dd79",
        "fromTable": "QueryFeature",
        "fromColumn": "SoC Die 2",
        "toTable": "QueryJiraSocDieName2",
        "toColumn": "dyn_lookup.value"
      },
      {
        "name": "7360e4ff-9e87-4f3b-a1b5-ac2831b87bc2",
        "fromTable": "QueryFeature",
        "fromColumn": "Soc Die 3",
        "toTable": "QueryJiraSocDieName3",
        "toColumn": "dyn_lookup.value"
      },
      {
        "name": "cc73177e-cdc0-4aff-9def-95fe8398e6ec",
        "fromTable": "QueryFeature",
        "fromColumn": "Soc Die 4",
        "toTable": "QueryJiraSocDieName4",
        "toColumn": "dyn_lookup.value"
      },
      {
        "name": "e3b38790-91a0-43ce-b1c4-89f8b1affab2",
        "fromTable": "QueryFeature",
        "fromColumn": "Soc Die 5",
        "toTable": "QueryJiraSocDieName5",
        "toColumn": "dyn_lookup.value"
      },
      {
        "name": "b3f7d5f7-57fd-4cb6-afeb-a84a7c3934f8",
        "fromTable": "QueryFeature",
        "fromColumn": "Configuration",
        "toTable": "QueryObsoleteConfig",
        "toColumn": "name"
      },
      {
        "name": "796de462-dfd1-40d6-be05-67fb6b929a58",
        "fromTable": "QueryFeature",
        "fromColumn": "Configuration",
        "toTable": "QueryGladius",
        "toColumn": "Configuration"
      }
    ],
    "roles": [
      {
        "name": "IPG_InternalUsers",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_SuperUsers",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603439"
          }
        ]
      },
      {
        "name": "IPG_Developers",
        "modelPermission": "administrator",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_Developers",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603422"
          }
        ]
      },
      {
        "name": "IPG_ExternalUsers",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_Users",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603440"
          }
        ]
      },
      {
        "name": "PAS_BIS_Developer",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "GER\\pas_bis_developer",
            "memberId": "S-1-5-21-2052111302-1275210071-1644491937-1027479"
          }
        ]
      }
    ]
  },
  "id": "SemanticModel"
}